,answerLabel,answerText,answerHTML
0,1,"Introduction to Abaco - What is Abaco - Using Abaco. What is Abaco Abaco is an NSF-funded web service and distributed computing platform providing functions-as-a-service (FaaS)  to the research computing community. Abaco implements functions using the Actor Model of concurrent computation. In  Abaco, each actor is associated with a Docker image, and actor containers are executed in response to messages posted  to their inbox which itself is given by a URI exposed over HTTP. Abaco will ultimately offer three primary higher-level capabilities on top of the underlying Actor model:.  Reactors for event-driven programming Asynchronous Executors for scaling out function calls within running applications, and Data Adapters for creating rationalized microservices from disparate and heterogeneous sources of data..  Reactors and Asynchronous Executors are available today while Data Adapters are still under active development..  Using Abaco Abaco is in production and has been adopted by several projects. Abaco is available to researchers and students. To  learn more about the the system, including getting access, follow the instructions in getting-started/index.","<h3>What is Abaco<a class=""headerlink"" href=""#what-is-abaco"" title=""Permalink to this headline"">¶</a></h3>
 <p><strong>Abaco</strong> is an NSF-funded web service and distributed computing platform providing functions-as-a-service (FaaS)
 to the research computing community. Abaco implements functions using the Actor Model of concurrent computation. In
 Abaco, each actor is associated with a Docker image, and actor containers are executed in response to messages posted
 to their inbox which itself is given by a URI exposed over HTTP.</p>
 <p>Abaco will ultimately offer three primary higher-level capabilities on top of the underlying Actor model:</p>
 <blockquote>
 <div><ul class=""simple"">
 <li><em>Reactors</em> for event-driven programming</li>
 <li><em>Asynchronous Executors</em> for scaling out function calls within running applications, and</li>
 <li><em>Data Adapters</em> for creating rationalized microservices from disparate and heterogeneous sources of data.</li>
 </ul>
 </div></blockquote>
 <p>Reactors and Asynchronous Executors are available today while Data Adapters are still under active development.</p>
 </div>
 <div class=""section"" id=""using-abaco"">
 <h3>Using Abaco<a class=""headerlink"" href=""#using-abaco"" title=""Permalink to this headline"">¶</a></h3>
 <p>Abaco is in production and has been adopted by several projects. Abaco is available to researchers and students. To
 learn more about the the system, including getting access, follow the instructions in <span class=""xref std std-doc"">getting-started/index</span>.</p>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""getting-started"">
"
1,2,"Introduction to Abaco - Getting Started. Getting Started This Getting Started guide will walk you through the initial steps of setting up the necessary accounts and installing  the required software before moving to the Abaco Quickstart, where you will create and execute your first Abaco actor. If  you are already using Docker Hub and the TACC Cloud APIs, feel free to jump right to the Abaco Quickstart or check  out the Abaco Live Docs site.","<h2>Getting Started<a class=""headerlink"" href=""#getting-started"" title=""Permalink to this headline"">¶</a></h2>
 <p>This Getting Started guide will walk you through the initial steps of setting up the necessary accounts and installing
 the required software before moving to the Abaco Quickstart, where you will create and execute your first Abaco actor. If
 you are already using Docker Hub and the TACC Cloud APIs, feel free to jump right to the <a class=""reference internal"" href=""#abaco-quickstart"">Abaco Quickstart</a> or check
 out the Abaco Live Docs <a class=""reference external"" href=""https://tacc.github.io/abaco-live-docs/"">site</a>.</p>
 <div class=""section"" id=""account-creation-and-software-installation"">
"
2,4,"Introduction to Abaco - Getting Started - Account Creation and Software Installation - Install the Tapis Python SDK. Create a TACC account The main instance of the Abaco platform is hosted at the Texas Advanced Computing Center (TACC).  TACC designs and deploys some of the world’s most powerful advanced computing technologies and innovative software  solutions to enable researchers to answer complex questions. To use the TACC-hosted Abaco service, please  create a TACC account ..  Create a Docker account Docker  is an open-source container runtime providing operating-system-level  virtualization. Abaco pulls images for its actors from the public Docker Hub. To register actors  you will need to publish images on Docker Hub, which requires a Docker account ..  Install the Tapis Python SDK To interact with the TACC-hosted Abaco platform in Python, we will leverage the Tapis Python SDK, tapipy. To install it,  simply run:.  Attention tapipy works with Python 3.","<h4>Create a TACC account<a class=""headerlink"" href=""#create-a-tacc-account"" title=""Permalink to this headline"">¶</a></h4>
 <p>The main instance of the Abaco platform is hosted at the Texas Advanced Computing Center (<a class=""reference external"" href=""https://tacc.utexas.edu"">TACC</a>).
 TACC designs and deploys some of the world’s most powerful advanced computing technologies and innovative software
 solutions to enable researchers to answer complex questions. To use the TACC-hosted Abaco service, please
 create a <a class=""reference external"" href=""https://portal.tacc.utexas.edu/account-request"">TACC account</a> .</p>
 </div>
 <div class=""section"" id=""create-a-docker-account"">
 <h4>Create a Docker account<a class=""headerlink"" href=""#create-a-docker-account"" title=""Permalink to this headline"">¶</a></h4>
 <p><a class=""reference external"" href=""https://www.docker.com/"">Docker</a>  is an open-source container runtime providing operating-system-level
 virtualization. Abaco pulls images for its actors from the public Docker Hub. To register actors
 you will need to publish images on Docker Hub, which requires a <a class=""reference external"" href=""https://hub.docker.com/"">Docker account</a> .</p>
 </div>
 <div class=""section"" id=""install-the-tapis-python-sdk"">
 <h4>Install the Tapis Python SDK<a class=""headerlink"" href=""#install-the-tapis-python-sdk"" title=""Permalink to this headline"">¶</a></h4>
 <p>To interact with the TACC-hosted Abaco platform in Python, we will leverage the Tapis Python SDK, tapipy. To install it,
 simply run:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ pip3 install tapipy
 </pre></div>
 </div>
 <div class=""admonition attention"">
 <p class=""first admonition-title"">Attention</p>
 <p class=""last""><code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> works with Python 3.</p>
 </div>
 </div>
 </div>
 <div class=""section"" id=""working-with-tacc-oauth"">
"
3,5,"Introduction to Abaco - Getting Started - Working with TACC OAuth. Working with TACC OAuth Authentication and authorization to the Tapis APIs uses OAuth2, a widely-adopted web standard.  Our implementation of OAuth2 is designed to give you the flexibility you need to script and automate use of Tapis  while keeping your access credentials and digital assets secure. This is covered in great detail in our  Tenancy and Authentication section, but some key concepts will be highlighted here, interleaved with Python code.","<h3>Working with TACC OAuth<a class=""headerlink"" href=""#working-with-tacc-oauth"" title=""Permalink to this headline"">¶</a></h3>
 <p>Authentication and authorization to the Tapis APIs uses <a class=""reference external"" href=""https://oauth.net/2/"">OAuth2</a>, a widely-adopted web standard.
 Our implementation of OAuth2 is designed to give you the flexibility you need to script and automate use of Tapis
 while keeping your access credentials and digital assets secure. This is covered in great detail in our
 Tenancy and Authentication section, but some key concepts will be highlighted here, interleaved with Python code.</p>
 <div class=""section"" id=""create-an-tapis-client-object"">
"
4,6,"Introduction to Abaco - Getting Started - Working with TACC OAuth - Check Access to the Tapis APIs. Create an Tapis Client Object The first step in using the Tapis Python SDK, tapipy, is to create a Tapis Client object. First, import  the Tapis class and create python object called t that points to the Tapis server using your TACC  username and password. Do so by typing the following in a Python shell:. . Generate a Token With the t object instantiated, we can exchange our credentials for an access token. In Tapis, you  never send your username and password directly to the services; instead, you pass an access token which  is cryptographically signed by the OAuth server and includes information about your identity. The Tapis  services use this token to determine who you are and what you can do.. . Note that the tapipy t object will store and pass your access token for you, so you don’t have to manually provide  the token when using the tapipy operations. You are now ready to check your access to the Tapis APIs. It will  expire though, after 4 hours, at which time you will need to generate a new token. If you are interested, you  can create an OAuth client (a one-time setup step, like creating a TACC account) that can be used to generate  access and refresh tokens. For simplicity, we are skipping that but if you are interested, check out the Tenancy and  Authentication section..  Check Access to the Tapis APIs The tapipy t object should now be configured to talk to all Tapis APIs on your behalf. We can check that the client is  configured properly by making any API call. For example, we can use the authenticator service to retrieve the full  TACC profile of our user. To do so, use the get_profile() function associated with the authenticator object on  the t object, passing the username of the profile to retrieve, as follows.","<h4>Create an Tapis Client Object<a class=""headerlink"" href=""#create-an-tapis-client-object"" title=""Permalink to this headline"">¶</a></h4>
 <p>The first step in using the Tapis Python SDK, tapipy, is to create a Tapis Client object. First, import
 the <code class=""docutils literal notranslate""><span class=""pre"">Tapis</span></code> class and create python object called <code class=""docutils literal notranslate""><span class=""pre"">t</span></code> that points to the Tapis server using your TACC
 username and password. Do so by typing the following in a Python shell:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""c1""># Import the Tapis object</span>
 <span class=""kn"">from</span> <span class=""nn"">tapipy.tapis</span> <span class=""kn"">import</span> <span class=""n"">Tapis</span>
 
 <span class=""c1""># Log into you the Tapis service by providing user/pass and url.</span>
 <span class=""n"">t</span> <span class=""o"">=</span> <span class=""n"">Tapis</span><span class=""p"">(</span><span class=""n"">base_url</span><span class=""o"">=</span><span class=""s1"">&#39;https://tacc.tapis.io&#39;</span><span class=""p"">,</span>
           <span class=""n"">username</span><span class=""o"">=</span><span class=""s1"">&#39;your username&#39;</span><span class=""p"">,</span>
           <span class=""n"">password</span><span class=""o"">=</span><span class=""s1"">&#39;your password&#39;</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""generate-a-token"">
 <h4>Generate a Token<a class=""headerlink"" href=""#generate-a-token"" title=""Permalink to this headline"">¶</a></h4>
 <p>With the <code class=""docutils literal notranslate""><span class=""pre"">t</span></code> object instantiated, we can exchange our credentials for an access token. In Tapis, you
 never send your username and password directly to the services; instead, you pass an access token which
 is cryptographically signed by the OAuth server and includes information about your identity. The Tapis
 services use this token to determine who you are and what you can do.</p>
 <blockquote>
 <div><div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""c1""># Get tokens that will be used for authenticated function calls</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">get_tokens</span><span class=""p"">()</span>
 <span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">access_token</span><span class=""o"">.</span><span class=""n"">access_token</span><span class=""p"">)</span>
 
 <span class=""n"">Out</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]:</span> <span class=""n"">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9</span><span class=""o"">...</span>
 </pre></div>
 </div>
 </div></blockquote>
 <p>Note that the tapipy <code class=""docutils literal notranslate""><span class=""pre"">t</span></code> object will store and pass your access token for you, so you don’t have to manually provide
 the token when using the tapipy operations. You are now ready to check your access to the Tapis APIs. It will
 expire though, after 4 hours, at which time you will need to generate a new token. If you are interested, you
 can create an OAuth client (a one-time setup step, like creating a TACC account) that can be used to generate
 access and refresh tokens. For simplicity, we are skipping that but if you are interested, check out the Tenancy and
 Authentication section.</p>
 </div>
 <div class=""section"" id=""check-access-to-the-tapis-apis"">
 <h4>Check Access to the Tapis APIs<a class=""headerlink"" href=""#check-access-to-the-tapis-apis"" title=""Permalink to this headline"">¶</a></h4>
 <p>The tapipy <code class=""docutils literal notranslate""><span class=""pre"">t</span></code> object should now be configured to talk to all Tapis APIs on your behalf. We can check that the client is
 configured properly by making any API call. For example, we can use the authenticator service to retrieve the full
 TACC profile of our user. To do so, use the <code class=""docutils literal notranslate""><span class=""pre"">get_profile()</span></code> function associated with the <code class=""docutils literal notranslate""><span class=""pre"">authenticator</span></code> object on
 the <code class=""docutils literal notranslate""><span class=""pre"">t</span></code> object, passing the username of the profile to retrieve, as follows.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">authenticator</span><span class=""o"">.</span><span class=""n"">get_profile</span><span class=""p"">(</span><span class=""n"">username</span><span class=""o"">=</span><span class=""s1"">&#39;apitest&#39;</span><span class=""p"">)</span>
 
 <span class=""n"">Out</span><span class=""p"">[</span><span class=""mi"">1</span><span class=""p"">]:</span>
 <span class=""n"">create_time</span><span class=""p"">:</span> <span class=""kc"">None</span>
 <span class=""n"">dn</span><span class=""p"">:</span> <span class=""n"">cn</span><span class=""o"">=</span><span class=""n"">apitest</span><span class=""p"">,</span><span class=""n"">ou</span><span class=""o"">=</span><span class=""n"">People</span><span class=""p"">,</span><span class=""n"">dc</span><span class=""o"">=</span><span class=""n"">tacc</span><span class=""p"">,</span><span class=""n"">dc</span><span class=""o"">=</span><span class=""n"">utexas</span><span class=""p"">,</span><span class=""n"">dc</span><span class=""o"">=</span><span class=""n"">edu</span>
 <span class=""n"">email</span><span class=""p"">:</span> <span class=""n"">aci</span><span class=""o"">-</span><span class=""n"">cic</span><span class=""nd"">@tacc</span><span class=""o"">.</span><span class=""n"">utexas</span><span class=""o"">.</span><span class=""n"">edu</span>
 <span class=""n"">username</span><span class=""p"">:</span> <span class=""n"">apitest</span>
 </pre></div>
 </div>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""abaco-quickstart"">
"
5,7,"Introduction to Abaco - Abaco Quickstart. Abaco Quickstart In this Quickstart, we will create an Abaco actor from a basic Python function. Then we will execute our actor on the  Abaco cloud and get the execution results.","<h2>Abaco Quickstart<a class=""headerlink"" href=""#abaco-quickstart"" title=""Permalink to this headline"">¶</a></h2>
 <p>In this Quickstart, we will create an Abaco actor from a basic Python function. Then we will execute our actor on the
 Abaco cloud and get the execution results.</p>
 <div class=""section"" id=""a-basic-python-function"">
"
6,8,"Introduction to Abaco - Abaco Quickstart - Building Images From a Dockerfile. A Basic Python Function Suppose we want to write a Python function that counts words in a string. We might write something like this:. In order to process a message sent to an actor, we use the raw_message attribute of the context dictionary.  We can access it by using the get_context method from the actors module in tapipy. For this example, create a new local directory to hold your work. Then, create a new file in this directory called  example.py. Add the following to this file:. . Building Images From a Dockerfile To register this function as an Abaco actor, we create a docker image that contains the Python function and  execute it as part of the default command. We can build a Docker image from a text file called a Dockerfile. You can think of a Dockerfile as a recipe for  creating images. The instructions within a Dockerfile either add files/folders to the image, add metadata to the  image, or both.","<h3>A Basic Python Function<a class=""headerlink"" href=""#a-basic-python-function"" title=""Permalink to this headline"">¶</a></h3>
 <p>Suppose we want to write a Python function that counts words in a string. We might write something like this:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""k"">def</span> <span class=""nf"">string_count</span><span class=""p"">(</span><span class=""n"">message</span><span class=""p"">):</span>
     <span class=""n"">words</span> <span class=""o"">=</span> <span class=""n"">message</span><span class=""o"">.</span><span class=""n"">split</span><span class=""p"">(</span><span class=""s1"">&#39; &#39;</span><span class=""p"">)</span>
     <span class=""n"">word_count</span> <span class=""o"">=</span> <span class=""nb"">len</span><span class=""p"">(</span><span class=""n"">words</span><span class=""p"">)</span>
     <span class=""nb"">print</span><span class=""p"">(</span><span class=""s1"">&#39;Number of words is: &#39;</span> <span class=""o"">+</span> <span class=""nb"">str</span><span class=""p"">(</span><span class=""n"">word_count</span><span class=""p"">))</span>
 </pre></div>
 </div>
 <p>In order to process a message sent to an actor, we use the <code class=""docutils literal notranslate""><span class=""pre"">raw_message</span></code> attribute of the <code class=""docutils literal notranslate""><span class=""pre"">context</span></code> dictionary.
 We can access it by using the <code class=""docutils literal notranslate""><span class=""pre"">get_context</span></code> method from the <code class=""docutils literal notranslate""><span class=""pre"">actors</span></code> module in <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code>.</p>
 <p>For this example, create a new local directory to hold your work. Then, create a new file in this directory called
 <code class=""docutils literal notranslate""><span class=""pre"">example.py</span></code>. Add the following to this file:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""c1""># example.py</span>
 
 <span class=""kn"">from</span> <span class=""nn"">tapipy.actors</span> <span class=""kn"">import</span> <span class=""n"">get_context</span>
 
 <span class=""k"">def</span> <span class=""nf"">string_count</span><span class=""p"">(</span><span class=""n"">message</span><span class=""p"">):</span>
     <span class=""n"">words</span> <span class=""o"">=</span> <span class=""n"">message</span><span class=""o"">.</span><span class=""n"">split</span><span class=""p"">(</span><span class=""s1"">&#39; &#39;</span><span class=""p"">)</span>
     <span class=""n"">word_count</span> <span class=""o"">=</span> <span class=""nb"">len</span><span class=""p"">(</span><span class=""n"">words</span><span class=""p"">)</span>
     <span class=""nb"">print</span><span class=""p"">(</span><span class=""s1"">&#39;Number of words is: &#39;</span> <span class=""o"">+</span> <span class=""nb"">str</span><span class=""p"">(</span><span class=""n"">word_count</span><span class=""p"">))</span>
 
 <span class=""n"">context</span> <span class=""o"">=</span> <span class=""n"">get_context</span><span class=""p"">()</span>
 <span class=""n"">message</span> <span class=""o"">=</span> <span class=""n"">context</span><span class=""p"">[</span><span class=""s1"">&#39;raw_message&#39;</span><span class=""p"">]</span>
 <span class=""n"">string_count</span><span class=""p"">(</span><span class=""n"">message</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""building-images-from-a-dockerfile"">
 <h3>Building Images From a Dockerfile<a class=""headerlink"" href=""#building-images-from-a-dockerfile"" title=""Permalink to this headline"">¶</a></h3>
 <p>To register this function as an Abaco actor, we create a docker image that contains the Python function and
 execute it as part of the default command.</p>
 <p>We can build a Docker image from a text file called a Dockerfile. You can think of a Dockerfile as a recipe for
 creating images. The instructions within a Dockerfile either add files/folders to the image, add metadata to the
 image, or both.</p>
 <div class=""section"" id=""the-from-instruction"">
"
7,9,"Introduction to Abaco - Abaco Quickstart - Building Images From a Dockerfile - The RUN, ADD and CMD Instructions. The FROM Instruction Create a new file called Dockerfile in the same directory as your example.py file. We can use the FROM instruction to start our new image from a known image. This should be the first line of our  Dockerfile. We will start an official Python image:. . The RUN, ADD and CMD Instructions We can run arbitrary Linux commands to add files to our image. We’ll run the pip command to install the tapipy  library in our image:. (note: there is a abacosample image that contains Python and the tapipy library; see the Samples  section for more details, coming soon.) We can also add local files to our image using the ADD instruction. To add the example.py file from our local  directory, we use the following instruction:. The last step is to write the command from running the application, which is simply python /example.py. We use  the CMD instruction to do that:. With that, our Dockerfile is now ready. This is what is looks like:. Now that we have our Dockerfile, we can build our image and push it to Docker Hub. To do so, we use the  docker build and docker push commands [note: user is your user on Docker, you must also $ docker login] :","<h4>The FROM Instruction<a class=""headerlink"" href=""#the-from-instruction"" title=""Permalink to this headline"">¶</a></h4>
 <p>Create a new file called <code class=""docutils literal notranslate""><span class=""pre"">Dockerfile</span></code> in the same directory as your <code class=""docutils literal notranslate""><span class=""pre"">example.py</span></code> file.</p>
 <p>We can use the <code class=""docutils literal notranslate""><span class=""pre"">FROM</span></code> instruction to start our new image from a known image. This should be the first line of our
 Dockerfile. We will start an official Python image:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>FROM python:3.6
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""the-run-add-and-cmd-instructions"">
 <h4>The RUN, ADD and CMD Instructions<a class=""headerlink"" href=""#the-run-add-and-cmd-instructions"" title=""Permalink to this headline"">¶</a></h4>
 <p>We can run arbitrary Linux commands to add files to our image. We’ll run the <code class=""docutils literal notranslate""><span class=""pre"">pip</span></code> command to install the <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code>
 library in our image:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>RUN pip install --no-cache-dir tapipy
 </pre></div>
 </div>
 <p>(note: there is a <code class=""docutils literal notranslate""><span class=""pre"">abacosample</span></code> image that contains Python and the tapipy library; see the <span class=""xref std std-ref"">Samples</span>
 section for more details, coming soon.)</p>
 <p>We can also add local files to our image using the <code class=""docutils literal notranslate""><span class=""pre"">ADD</span></code> instruction. To add the <code class=""docutils literal notranslate""><span class=""pre"">example.py</span></code> file from our local
 directory, we use the following instruction:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>ADD example.py /example.py
 </pre></div>
 </div>
 <p>The last step is to write the command from running the application, which is simply <code class=""docutils literal notranslate""><span class=""pre"">python</span> <span class=""pre"">/example.py</span></code>. We use
 the <code class=""docutils literal notranslate""><span class=""pre"">CMD</span></code> instruction to do that:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>CMD <span class=""o"">[</span><span class=""s2"">&quot;python&quot;</span>, <span class=""s2"">&quot;/example.py&quot;</span><span class=""o"">]</span>
 </pre></div>
 </div>
 <p>With that, our <code class=""docutils literal notranslate""><span class=""pre"">Dockerfile</span></code> is now ready. This is what is looks like:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>FROM python:3.6
 
 RUN pip install --no-cache-dir tapipy
 ADD example.py /example.py
 
 CMD <span class=""o"">[</span><span class=""s2"">&quot;python&quot;</span>, <span class=""s2"">&quot;/example.py&quot;</span><span class=""o"">]</span>
 </pre></div>
 </div>
 <p>Now that we have our <code class=""docutils literal notranslate""><span class=""pre"">Dockerfile</span></code>, we can build our image and push it to Docker Hub. To do so, we use the
 <code class=""docutils literal notranslate""><span class=""pre"">docker</span> <span class=""pre"">build</span></code> and <code class=""docutils literal notranslate""><span class=""pre"">docker</span> <span class=""pre"">push</span></code> commands [note: user is your user on Docker, you must also $ docker login] :</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ docker build -t user/my_actor .
 $ docker push user/my_actor
 </pre></div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""registering-an-actor"">
"
8,10,"Introduction to Abaco - Abaco Quickstart - Conclusion. Registering an Actor Now we are going to register the Docker image we just built as an Abaco actor. To do this, we will use the Tapis  client object we created above (see Working with TACC OAuth). To register an actor using the tapipy library, we use the actors.add() method and pass the arguments describing  the actor we want to register through the body parameter. For example:. You should see a response like this:. Notes:. Abaco assigned an id to the actor (in this case JWpkNmBwKewYo) and associated it with the image (in this case,  abacosamples/wc) which it began pulling from the public Docker Hub. Abaco returned a status of SUBMITTED for the actor; behind the scenes, Abaco is starting a worker container to  handle messages passed to this actor. The worker must initialize itself (download the image, etc) before the  actor is ready. When the actor’s worker is initialized, the status will change to READY.. At any point we can check the details of our actor, including its status, with the following:. The response format is identical to that returned from the .add() method..  Executing an Actor We are now ready to execute our actor by sending it a message. We built our actor to process a raw message string, so  that is what we will send, but there other options, including JSON and binary data. For more details, see the  messages section. We send our actor a message using the send_message() method:. Abaco queues up an execution for our actor and then responds with JSON, including an id for the execution contained in  the execution_id:. In general, an execution does not start immediately but is instead queued until a future time when a worker for the  actor can take the message and start an actor container with the message. We can retrieve the details about an  execution, including its status, using the get_execution() method:. The response will be similar to the following:. Note that a status of COMPLETE indicates that the execution has finished and we are ready to retrieve our results..  Retrieving the Logs The Abaco system collects all standard out from an actor execution and makes it available via the logs endpoint.  Let’s retrieve the logs from the execution we just made. We use the get_execution_logs()  method, passing out actor_id and our execution_id:. The response should be similar to the following:. We see our actor output Number of words is: 5, which is the expected result!.  Conclusion Congratulations! At this point you have created, registered and executed your first actor, but there is a lot more you  can do with the Abaco system. To learn more about the additional capabilities, please continue on to the Technical Guide.","<h3>Registering an Actor<a class=""headerlink"" href=""#registering-an-actor"" title=""Permalink to this headline"">¶</a></h3>
 <p>Now we are going to register the Docker image we just built as an Abaco actor. To do this, we will use the <code class=""docutils literal notranslate""><span class=""pre"">Tapis</span></code>
 client object we created above (see <a class=""reference internal"" href=""#working-with-tacc-oauth"">Working with TACC OAuth</a>).</p>
 <p>To register an actor using the tapipy library, we use the <code class=""docutils literal notranslate""><span class=""pre"">actors.add()</span></code> method and pass the arguments describing
 the actor we want to register through the <code class=""docutils literal notranslate""><span class=""pre"">body</span></code> parameter. For example:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">my_actor</span> <span class=""o"">=</span> <span class=""p"">{</span><span class=""s2"">&quot;image&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;user/my_actor&quot;</span><span class=""p"">,</span> <span class=""s2"">&quot;name&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;word_counter&quot;</span><span class=""p"">,</span> <span class=""s2"">&quot;description&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;Actor that counts words.&quot;</span><span class=""p"">}</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">create_actor</span><span class=""p"">(</span><span class=""o"">**</span><span class=""n"">my_actor</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>You should see a response like this:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">executions</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">actors</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">JWpkNmBwKewYo</span><span class=""o"">/</span><span class=""n"">executions</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">jstubbs</span>
 <span class=""n"">createTime</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">20</span><span class=""p"">:</span><span class=""mf"">20.718177</span>
 <span class=""n"">default_environment</span><span class=""p"">:</span>
 <span class=""n"">description</span><span class=""p"">:</span> <span class=""n"">Actor</span> <span class=""n"">that</span> <span class=""n"">counts</span> <span class=""n"">words</span><span class=""o"">.</span>
 <span class=""n"">hints</span><span class=""p"">:</span> <span class=""p"">[]</span>
 <span class=""nb"">id</span><span class=""p"">:</span> <span class=""n"">JWpkNmBwKewYo</span>
 <span class=""n"">image</span><span class=""p"">:</span> <span class=""n"">abacosamples</span><span class=""o"">/</span><span class=""n"">wc</span>
 <span class=""n"">last_update_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">20</span><span class=""p"">:</span><span class=""mf"">20.718177</span>
 <span class=""n"">link</span><span class=""p"">:</span>
 <span class=""n"">mounts</span><span class=""p"">:</span> <span class=""p"">[</span>
 <span class=""n"">container_path</span><span class=""p"">:</span> <span class=""o"">/</span><span class=""n"">home</span><span class=""o"">/</span><span class=""n"">tapis</span><span class=""o"">/</span><span class=""n"">runtime_files</span><span class=""o"">/</span><span class=""n"">_abaco_data1</span>
 <span class=""n"">host_path</span><span class=""p"">:</span> <span class=""o"">/</span><span class=""n"">home</span><span class=""o"">/</span><span class=""n"">apim</span><span class=""o"">/</span><span class=""n"">staging</span><span class=""o"">/</span><span class=""n"">runtime_files</span><span class=""o"">/</span><span class=""n"">data1</span>
 <span class=""n"">mode</span><span class=""p"">:</span> <span class=""n"">ro</span><span class=""p"">,</span>
 <span class=""n"">container_path</span><span class=""p"">:</span> <span class=""o"">/</span><span class=""n"">home</span><span class=""o"">/</span><span class=""n"">tapis</span><span class=""o"">/</span><span class=""n"">runtime_files</span><span class=""o"">/</span><span class=""n"">_abaco_data2</span>
 <span class=""n"">host_path</span><span class=""p"">:</span> <span class=""o"">/</span><span class=""n"">home</span><span class=""o"">/</span><span class=""n"">apim</span><span class=""o"">/</span><span class=""n"">staging</span><span class=""o"">/</span><span class=""n"">runtime_files</span><span class=""o"">/</span><span class=""n"">data2</span><span class=""o"">/</span><span class=""n"">master</span><span class=""o"">/</span><span class=""n"">abaco</span>
 <span class=""n"">mode</span><span class=""p"">:</span> <span class=""n"">rw</span><span class=""p"">]</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">abaco</span>
 <span class=""n"">privileged</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">queue</span><span class=""p"">:</span> <span class=""n"">default</span>
 <span class=""n"">state</span><span class=""p"">:</span>
 <span class=""n"">stateless</span><span class=""p"">:</span> <span class=""kc"">True</span>
 <span class=""n"">status</span><span class=""p"">:</span> <span class=""n"">SUBMITTED</span>
 <span class=""n"">status_message</span><span class=""p"">:</span>
 <span class=""n"">token</span><span class=""p"">:</span> <span class=""n"">false</span>
 <span class=""nb"">type</span><span class=""p"">:</span> <span class=""n"">none</span>
 <span class=""n"">use_container_uid</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">webhook</span><span class=""p"">:</span>
 </pre></div>
 </div>
 <p>Notes:</p>
 <ul class=""simple"">
 <li>Abaco assigned an id to the actor (in this case <code class=""docutils literal notranslate""><span class=""pre"">JWpkNmBwKewYo</span></code>) and associated it with the image (in this case,
 <code class=""docutils literal notranslate""><span class=""pre"">abacosamples/wc</span></code>) which it began pulling from the public Docker Hub.</li>
 <li>Abaco returned a status of <code class=""docutils literal notranslate""><span class=""pre"">SUBMITTED</span></code> for the actor; behind the scenes, Abaco is starting a worker container to
 handle messages passed to this actor. The worker must initialize itself (download the image, etc) before the
 actor is ready.</li>
 <li>When the actor’s worker is initialized, the status will change to <code class=""docutils literal notranslate""><span class=""pre"">READY</span></code>.</li>
 </ul>
 <p>At any point we can check the details of our actor, including its status, with the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">get_actor</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;JWpkNmBwKewYo&#39;</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>The response format is identical to that returned from the <code class=""docutils literal notranslate""><span class=""pre"">.add()</span></code> method.</p>
 </div>
 <div class=""section"" id=""executing-an-actor"">
 <h3>Executing an Actor<a class=""headerlink"" href=""#executing-an-actor"" title=""Permalink to this headline"">¶</a></h3>
 <p>We are now ready to execute our actor by sending it a message. We built our actor to process a raw message string, so
 that is what we will send, but there other options, including JSON and binary data. For more details, see the
 <span class=""xref std std-ref"">messages</span> section.</p>
 <p>We send our actor a message using the <code class=""docutils literal notranslate""><span class=""pre"">send_message()</span></code> method:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">send_message</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;JWpkNmBwKewYo&#39;</span><span class=""p"">,</span>
                       <span class=""n"">request_body</span><span class=""o"">=</span><span class=""p"">{</span><span class=""s1"">&#39;message&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;Actor, please count these words.&#39;</span><span class=""p"">})</span>
 </pre></div>
 </div>
 <p>Abaco queues up an execution for our actor and then responds with JSON, including an id for the execution contained in
 the <code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code>:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">messages</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">actors</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">JWpkNmBwKewYo</span><span class=""o"">/</span><span class=""n"">messages</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">jstubbs</span>
 <span class=""n"">execution_id</span><span class=""p"">:</span> <span class=""n"">kA1P1m8NkkolK</span>
 <span class=""n"">msg</span><span class=""p"">:</span> <span class=""n"">Actor</span><span class=""p"">,</span> <span class=""n"">please</span> <span class=""n"">count</span> <span class=""n"">these</span> <span class=""n"">words</span><span class=""o"">.</span>
 </pre></div>
 </div>
 <p>In general, an execution does not start immediately but is instead queued until a future time when a worker for the
 actor can take the message and start an actor container with the message. We can retrieve the details about an
 execution, including its status, using the <code class=""docutils literal notranslate""><span class=""pre"">get_execution()</span></code> method:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>&gt;&gt;&gt; t.actors.get_execution<span class=""o"">(</span><span class=""nv"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;JWpkNmBwKewYo&#39;</span>, <span class=""nv"">execution_id</span><span class=""o"">=</span><span class=""s1"">&#39;kA1P1m8NkkolK&#39;</span><span class=""o"">)</span>
 </pre></div>
 </div>
 <p>The response will be similar to the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">logs</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">actors</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">JWpkNmBwKewYo</span><span class=""o"">/</span><span class=""n"">executions</span><span class=""o"">/</span><span class=""n"">kA1P1m8NkkolK</span><span class=""o"">/</span><span class=""n"">logs</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">jstubbs</span>
 <span class=""n"">actor_id</span><span class=""p"">:</span> <span class=""n"">JWpkNmBwKewYo</span>
 <span class=""n"">api_server</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span>
 <span class=""n"">cpu</span><span class=""p"">:</span> <span class=""mi"">9678006850</span>
 <span class=""n"">executor</span><span class=""p"">:</span> <span class=""n"">jstubbs</span>
 <span class=""n"">exitCode</span><span class=""p"">:</span> <span class=""mi"">1</span>
 <span class=""n"">final_state</span><span class=""p"">:</span>
 <span class=""n"">Dead</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Error</span><span class=""p"">:</span>
 <span class=""n"">ExitCode</span><span class=""p"">:</span> <span class=""mi"">1</span>
 <span class=""n"">FinishedAt</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">49.77</span><span class=""n"">Z0</span>
 <span class=""n"">OOMKilled</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Paused</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Pid</span><span class=""p"">:</span> <span class=""mi"">0</span>
 <span class=""n"">Restarting</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Running</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">StartedAt</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">45.24</span><span class=""n"">Z0</span>
 <span class=""n"">Status</span><span class=""p"">:</span> <span class=""n"">exited</span>
 <span class=""n"">finish_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">49.77</span><span class=""n"">Z0</span>
 <span class=""nb"">id</span><span class=""p"">:</span> <span class=""n"">kA1P1m8NkkolK</span>
 <span class=""n"">io</span><span class=""p"">:</span> <span class=""mi"">152287298</span>
 <span class=""n"">message_received_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">44.367</span><span class=""n"">Z</span>
 <span class=""n"">runtime</span><span class=""p"">:</span> <span class=""mi"">5</span>
 <span class=""n"">start_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">44.841</span><span class=""n"">Z</span>
 <span class=""n"">status</span><span class=""p"">:</span> <span class=""n"">COMPLETE</span>
 <span class=""n"">worker_id</span><span class=""p"">:</span> <span class=""n"">QBmoQx4pOx1oA</span>
 </pre></div>
 </div>
 <p>Note that a status of <code class=""docutils literal notranslate""><span class=""pre"">COMPLETE</span></code> indicates that the execution has finished and we are ready to retrieve our results.</p>
 </div>
 <div class=""section"" id=""retrieving-the-logs"">
 <h3>Retrieving the Logs<a class=""headerlink"" href=""#retrieving-the-logs"" title=""Permalink to this headline"">¶</a></h3>
 <p>The Abaco system collects all standard out from an actor execution and makes it available via the <code class=""docutils literal notranslate""><span class=""pre"">logs</span></code> endpoint.
 Let’s retrieve the logs from the execution we just made. We use the <code class=""docutils literal notranslate""><span class=""pre"">get_execution_logs()</span></code>
 method, passing out <code class=""docutils literal notranslate""><span class=""pre"">actor_id</span></code> and our <code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code>:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">get_execution_logs</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;JWpkNmBwKewYo&#39;</span><span class=""p"">,</span> <span class=""n"">execution_id</span><span class=""o"">=</span><span class=""s1"">&#39;kA1P1m8NkkolK&#39;</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>The response should be similar to the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">execution</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">actors</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">JWpkNmBwKewYo</span><span class=""o"">/</span><span class=""n"">executions</span><span class=""o"">/</span><span class=""n"">kA1P1m8NkkolK</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">jstubbs</span>
 <span class=""n"">logs</span><span class=""p"">:</span> <span class=""n"">Number</span> <span class=""n"">of</span> <span class=""n"">words</span> <span class=""ow"">is</span><span class=""p"">:</span> <span class=""mi"">5</span>\<span class=""n"">n</span>
 </pre></div>
 </div>
 <p>We see our actor output <cite>Number of words is: 5</cite>, which is the expected result!</p>
 </div>
 <div class=""section"" id=""conclusion"">
 <h3>Conclusion<a class=""headerlink"" href=""#conclusion"" title=""Permalink to this headline"">¶</a></h3>
 <p>Congratulations! At this point you have created, registered and executed your first actor, but there is a lot more you
 can do with the Abaco system. To learn more about the additional capabilities, please continue on to the Technical Guide.</p>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""actor-registration"">
"
9,11,"Introduction to Abaco - Abaco Context & Container Runtime. Actor Registration When registering an actor, the only required field is a reference to an image on the public Docker Hub. However,  there are several other properties that can be set. The following table provides a list of the configurable properties  available to all users and their descriptions.. . .  Property Name relates to Description. .  image relates to The Docker image to associate with the actor. This should be a fully qualified  image available on the public Docker Hub. We encourage users to use to image  tags to version control their actors..  name relates to A user defined name for the actor..  description relates to A user defined description for the actor..  default_environment relates to The default environment is a set of key/value pairs to be injected into every  execution of the actor. The values can also be overridden when passing a  message to the reactor in the query parameters (see messages)..  hints relates to A list of strings representing user-defined “tags” or metadata about the actor.  “Official” Abaco hints can be applied to control configurable aspects of the  actor runtime, such as the autoscaling algorithm used. (see autoscaling)..  link relates to Actor identifier (id or alias) of an actor to “link” this actor’s events to.  Requires execute permissions on the linked actor, and cycles are not permitted.  (see complex)..  privileged relates to (True/False) - Whether the actor runs in privileged mode and has access to  the Docker daemon. Note: Setting this parameter to True requires elevated  permissions..  stateless relates to (True/False) - Whether the actor stores private state as part of its execution.  If True, the state API will not be available, but in a future release, the  Abaco service will be able to automatically scale reactor processes to execute  messages in parallel. The default value is False..  token relates to (True/False) - Whether to generate an OAuth access token for every execution of  this actor. Generating an OAuth token add about 500 ms of time to the execution  start up time. *Note: the default value for the token attribute varies from  tenant to tenant. Always explicitly set the token attribute when registering  new actors to ensure the proper behavior..  use_container_uid relates to Run the actor using the UID/GID set in the Docker image. Note: Setting  this parameter to True requires elevated permissions..  run_as_executor relates to Run the actor using the UID/GID of the executor rather than the owner  Note: this parameter is only available to certain tenants  Note: that this cannot be on while the use_container_uid is also on.  webhook relates to URL to publish this actor’s events to.  (see complex).. . . The default_environment can be used to provide sensitive information to the actor that cannot be put in the image. In order to execute privileged actors or to override the UID/GID used when executing an actor container,  talk to the Abaco development team about your use case. Abaco supports running specific actors within a given tenant on dedicated and/or specialized hardware for performance reasons. It  accomplishes this through the use of actor queues. If you need to run actors on dedicated resources, talk to the  Abaco development team about your use case.. Here is an example using curl; note that to set the default environment, we must pass content type application/json and  be sure to pass properly formatted JSON in the payload.. To register the same actor using the tapipy library, we use the actors.create_actor() method and pass the same arguments  through the request_body parameter. In this case, the default_environment is just a standard Python dictionary where the  keys and values are str type. For example,. .  Abaco Context & Container Runtime In this section we describe the environment that Abaco actor containers can utilize during their execution.","<h2>Actor Registration<a class=""headerlink"" href=""#actor-registration"" title=""Permalink to this headline"">¶</a></h2>
 <p>When registering an actor, the only required field is a reference to an image on the public Docker Hub. However,
 there are several other properties that can be set. The following table provides a list of the configurable properties
 available to all users and their descriptions.</p>
 <table border=""1"" class=""docutils"">
 <colgroup>
 <col width=""20%"" />
 <col width=""80%"" />
 </colgroup>
 <thead valign=""bottom"">
 <tr class=""row-odd""><th class=""head"">Property Name</th>
 <th class=""head"">Description</th>
 </tr>
 </thead>
 <tbody valign=""top"">
 <tr class=""row-even""><td>image</td>
 <td>The Docker image to associate with the actor. This should be a fully qualified
 image available on the public Docker Hub. We encourage users to use to image
 tags to version control their actors.</td>
 </tr>
 <tr class=""row-odd""><td>name</td>
 <td>A user defined name for the actor.</td>
 </tr>
 <tr class=""row-even""><td>description</td>
 <td>A user defined description for the actor.</td>
 </tr>
 <tr class=""row-odd""><td>default_environment</td>
 <td>The default environment is a set of key/value pairs to be injected into every
 execution of the actor. The values can also be overridden when passing a
 message to the reactor in the query parameters (see <span class=""xref std std-ref"">messages</span>).</td>
 </tr>
 <tr class=""row-even""><td>hints</td>
 <td>A list of strings representing user-defined “tags” or metadata about the actor.
 “Official” Abaco hints can be applied to control configurable aspects of the
 actor runtime, such as the autoscaling algorithm used. (see <span class=""xref std std-ref"">autoscaling</span>).</td>
 </tr>
 <tr class=""row-odd""><td>link</td>
 <td>Actor identifier (id or alias) of an actor to “link” this actor’s events to.
 Requires execute permissions on the linked actor, and cycles are not permitted.
 (see <span class=""xref std std-ref"">complex</span>).</td>
 </tr>
 <tr class=""row-even""><td>privileged</td>
 <td>(True/False) - Whether the actor runs in privileged mode and has access to
 the Docker daemon. <em>Note</em>: Setting this parameter to True requires elevated
 permissions.</td>
 </tr>
 <tr class=""row-odd""><td>stateless</td>
 <td>(True/False) - Whether the actor stores private state as part of its execution.
 If True, the state API will not be available, but in a future release, the
 Abaco service will be able to automatically scale reactor processes to execute
 messages in parallel. The default value is False.</td>
 </tr>
 <tr class=""row-even""><td>token</td>
 <td><p class=""first"">(True/False) - Whether to generate an OAuth access token for every execution of
 this actor. Generating an OAuth token add about 500 ms of time to the execution
 start up time.</p>
 <p class=""last""><a href=""#id2""><span class=""problematic"" id=""id3"">*</span></a>Note: the default value for the <code class=""docutils literal notranslate""><span class=""pre"">token</span></code> attribute varies from
 tenant to tenant. Always explicitly set the token attribute when registering
 new actors to ensure the proper behavior.</p>
 </td>
 </tr>
 <tr class=""row-odd""><td>use_container_uid</td>
 <td>Run the actor using the UID/GID set in the Docker image. <em>Note</em>: Setting
 this parameter to True requires elevated permissions.</td>
 </tr>
 <tr class=""row-even""><td>run_as_executor</td>
 <td>Run the actor using the UID/GID of the executor rather than the owner
 <em>Note</em>: this parameter is only available to certain tenants
 <em>Note</em>: that this cannot be on while the use_container_uid is also on</td>
 </tr>
 <tr class=""row-odd""><td>webhook</td>
 <td>URL to publish this actor’s events to.
 (see <span class=""xref std std-ref"">complex</span>).</td>
 </tr>
 </tbody>
 </table>
 <ul class=""simple"">
 <li>The <code class=""docutils literal notranslate""><span class=""pre"">default_environment</span></code> can be used to provide sensitive information to the actor that cannot be put in the image.</li>
 <li>In order to execute privileged actors or to override the UID/GID used when executing an actor container,
 talk to the Abaco development team about your use case.</li>
 <li>Abaco supports running specific actors within a given tenant on dedicated and/or specialized hardware for performance reasons. It
 accomplishes this through the use of actor <code class=""docutils literal notranslate""><span class=""pre"">queues</span></code>. If you need to run actors on dedicated resources, talk to the
 Abaco development team about your use case.</li>
 </ul>
 <p>Here is an example using curl; note that to set the default environment, we <em>must</em> pass content type <code class=""docutils literal notranslate""><span class=""pre"">application/json</span></code> and
 be sure to pass properly formatted JSON in the payload.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -H <span class=""s2"">&quot;Content-Type: application/json&quot;</span> <span class=""se"">\</span>
 -d <span class=""s1"">&#39;{&quot;image&quot;: &quot;abacosamples/test&quot;, &quot;name&quot;: &quot;test&quot;, &quot;description&quot;: &quot;My test actor using the abacosamples image.&quot;, &quot;default_environment&quot;:{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;} }&#39;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors
 </pre></div>
 </div>
 <p>To register the same actor using the tapipy library, we use the <code class=""docutils literal notranslate""><span class=""pre"">actors.create_actor()</span></code> method and pass the same arguments
 through the <cite>request_body</cite> parameter. In this case, the <code class=""docutils literal notranslate""><span class=""pre"">default_environment</span></code> is just a standard Python dictionary where the
 keys and values are <code class=""docutils literal notranslate""><span class=""pre"">str</span></code> type. For example,</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">from</span> <span class=""nn"">tapipy.tapis</span> <span class=""kn"">import</span> <span class=""n"">Tapis</span>
 <span class=""n"">t</span> <span class=""o"">=</span> <span class=""n"">Tapis</span><span class=""p"">(</span><span class=""n"">api_server</span><span class=""o"">=</span><span class=""s1"">&#39;https://tacc.tapis.io&#39;</span><span class=""p"">,</span> <span class=""n"">username</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;username&gt;&#39;</span><span class=""p"">,</span> <span class=""n"">password</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;password&gt;&#39;</span><span class=""p"">)</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">get_tokens</span><span class=""p"">()</span>
 <span class=""n"">actor</span> <span class=""o"">=</span> <span class=""p"">{</span><span class=""s2"">&quot;image&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;abacosamples/test&quot;</span><span class=""p"">,</span>
          <span class=""s2"">&quot;name&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;test&quot;</span><span class=""p"">,</span>
          <span class=""s2"">&quot;description&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;My test actor using the abacosamples image registered using tapipy.&quot;</span><span class=""p"">,</span>
          <span class=""s2"">&quot;default_environment&quot;</span><span class=""p"">:{</span><span class=""s2"">&quot;key1&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;value1&quot;</span><span class=""p"">,</span> <span class=""s2"">&quot;key2&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;value2&quot;</span><span class=""p"">}</span> <span class=""p"">}</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">create_actor</span><span class=""p"">(</span><span class=""o"">**</span><span class=""n"">actor</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""abaco-context-container-runtime"">
 <h2>Abaco Context &amp; Container Runtime<a class=""headerlink"" href=""#abaco-context-container-runtime"" title=""Permalink to this headline"">¶</a></h2>
 <p>In this section we describe the environment that Abaco actor containers can utilize during their execution.</p>
 <div class=""section"" id=""context"">
"
10,12,"Introduction to Abaco - Abaco Context & Container Runtime - Context. Context When an actor container is launched, Abaco injects information about the execution into a number of environment  variables. This information is collectively referred to as the context. The following table provides a complete  list of variable names and their description:. . .  Variable Name relates to Description. .  _abaco_actor_id relates to The id of the actor..  _abaco_actor_dbid relates to The Abaco internal id of the actor..  _abaco_container_repo relates to The Docker image used to launch this actor container..  _abaco_worker_id relates to The id of the worker for the actor overseeing this execution..  _abaco_execution_id relates to The id of the current execution..  _abaco_access_token relates to An OAuth2 access token representing the user who registered the actor..  _abaco_api_server relates to The OAuth2 API server associated with the actor..  _abaco_actor_state relates to The value of the actor’s state at the start of the execution..  _abaco_Content-Type relates to The data type of the message (either ‘str’ or ‘application/json’)..  _abaco_username relates to The username of the “executor”, i.e., the user who sent the message..  _abaco_api_server relates to The base URL for the Abaco API service..  MSG relates to The message sent to the actor, as a raw string.","<h3>Context<a class=""headerlink"" href=""#context"" title=""Permalink to this headline"">¶</a></h3>
 <p>When an actor container is launched, Abaco injects information about the execution into a number of environment
 variables. This information is collectively referred to as the <code class=""docutils literal notranslate""><span class=""pre"">context</span></code>. The following table provides a complete
 list of variable names and their description:</p>
 <table border=""1"" class=""docutils"">
 <colgroup>
 <col width=""23%"" />
 <col width=""77%"" />
 </colgroup>
 <thead valign=""bottom"">
 <tr class=""row-odd""><th class=""head"">Variable Name</th>
 <th class=""head"">Description</th>
 </tr>
 </thead>
 <tbody valign=""top"">
 <tr class=""row-even""><td>_abaco_actor_id</td>
 <td>The id of the actor.</td>
 </tr>
 <tr class=""row-odd""><td>_abaco_actor_dbid</td>
 <td>The Abaco internal id of the actor.</td>
 </tr>
 <tr class=""row-even""><td>_abaco_container_repo</td>
 <td>The Docker image used to launch this actor container.</td>
 </tr>
 <tr class=""row-odd""><td>_abaco_worker_id</td>
 <td>The id of the worker for the actor overseeing this execution.</td>
 </tr>
 <tr class=""row-even""><td>_abaco_execution_id</td>
 <td>The id of the current execution.</td>
 </tr>
 <tr class=""row-odd""><td>_abaco_access_token</td>
 <td>An OAuth2 access token representing the user who registered the actor.</td>
 </tr>
 <tr class=""row-even""><td>_abaco_api_server</td>
 <td>The OAuth2 API server associated with the actor.</td>
 </tr>
 <tr class=""row-odd""><td>_abaco_actor_state</td>
 <td>The value of the actor’s state at the start of the execution.</td>
 </tr>
 <tr class=""row-even""><td>_abaco_Content-Type</td>
 <td>The data type of the message (either ‘str’ or ‘application/json’).</td>
 </tr>
 <tr class=""row-odd""><td>_abaco_username</td>
 <td>The username of the “executor”, i.e., the user who sent the message.</td>
 </tr>
 <tr class=""row-even""><td>_abaco_api_server</td>
 <td>The base URL for the Abaco API service.</td>
 </tr>
 <tr class=""row-odd""><td>MSG</td>
 <td>The message sent to the actor, as a raw string.</td>
 </tr>
 </tbody>
 </table>
 <div class=""section"" id=""notes"">
"
11,13,"Introduction to Abaco - Abaco Context & Container Runtime - Context - Access from Python. Notes. The _abaco_actor_dbid is unique to each actor. Using this id, an actor can distinguish itself from other actors registered with the same function providing for SPMD techniques. The _abaco_access_token is a valid OAuth token that actors can use to make authenticated requests to other TACC Cloud APIs during their execution. The actor can update its state during the course of its execution; see the section state for more details. The “executor” of the actor may be different from the owner; see sharing for more details.. . Access from Python The tapipy.actors module provides access to the above data in native Python objects.  Currently, the actors module provides the following utilities:.  get_context() - returns a Python dictionary with the following fields:. raw_message - the original message, either string or JSON depending on the Contetnt-Type. content_type - derived from the original message request. message_dict - A Python dictionary representing the message (for Content-Type: application/json) execution_id - the ID of this execution. username - the username of the user that requested the execution. state - (for stateful actors) state value at the start of the execution. actor_id - the actor’s id.. .  get_client() - returns a pre-authenticated tapipy.Tapis object. update_state(val) - Atomically, update the actor’s state to the value val.","<h4>Notes<a class=""headerlink"" href=""#notes"" title=""Permalink to this headline"">¶</a></h4>
 <ul class=""simple"">
 <li>The <code class=""docutils literal notranslate""><span class=""pre"">_abaco_actor_dbid</span></code> is unique to each actor. Using this id, an actor can distinguish itself from other actors registered with the same function providing for SPMD techniques.</li>
 <li>The <code class=""docutils literal notranslate""><span class=""pre"">_abaco_access_token</span></code> is a valid OAuth token that actors can use to make authenticated requests to other TACC Cloud APIs during their execution.</li>
 <li>The actor can update its state during the course of its execution; see the section <span class=""xref std std-ref"">state</span> for more details.</li>
 <li>The “executor” of the actor may be different from the owner; see <span class=""xref std std-ref"">sharing</span> for more details.</li>
 </ul>
 </div>
 <div class=""section"" id=""access-from-python"">
 <h4>Access from Python<a class=""headerlink"" href=""#access-from-python"" title=""Permalink to this headline"">¶</a></h4>
 <p>The <code class=""docutils literal notranslate""><span class=""pre"">tapipy.actors</span></code> module provides access to the above data in native Python objects.
 Currently, the actors module provides the following utilities:</p>
 <ul class=""simple"">
 <li><dl class=""first docutils"">
 <dt><code class=""docutils literal notranslate""><span class=""pre"">get_context()</span></code> - returns a Python dictionary with the following fields:</dt>
 <dd><ul class=""first last"">
 <li><code class=""docutils literal notranslate""><span class=""pre"">raw_message</span></code> - the original message, either string or JSON depending on the Contetnt-Type.</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">content_type</span></code> - derived from the original message request.</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">message_dict</span></code> - A Python dictionary representing the message (for Content-Type: application/json)</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code> - the ID of this execution.</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">username</span></code> - the username of the user that requested the execution.</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">state</span></code> - (for stateful actors) state value at the start of the execution.</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">actor_id</span></code> - the actor’s id.</li>
 </ul>
 </dd>
 </dl>
 </li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">get_client()</span></code> - returns a pre-authenticated <code class=""docutils literal notranslate""><span class=""pre"">tapipy.Tapis</span></code> object.</li>
 <li><code class=""docutils literal notranslate""><span class=""pre"">update_state(val)</span></code> - Atomically, update the actor’s state to the value <code class=""docutils literal notranslate""><span class=""pre"">val</span></code>.</li>
 </ul>
 </div>
 </div>
 <div class=""section"" id=""runtime-environment"">
"
12,14,Introduction to Abaco - Abaco Context & Container Runtime - Runtime Environment. Runtime Environment The environment in which an Abaco actor container runs has been built to accommodate a number of typical use cases  encountered in research computing in a secure manner.,"<h3>Runtime Environment<a class=""headerlink"" href=""#runtime-environment"" title=""Permalink to this headline"">¶</a></h3>
 <p>The environment in which an Abaco actor container runs has been built to accommodate a number of typical use cases
 encountered in research computing in a secure manner.</p>
 <div class=""section"" id=""container-uid-and-gid"">
"
13,15,"Introduction to Abaco - Abaco Context & Container Runtime - Runtime Environment - POSIX Interface to the TACC WORK File System. Container UID and GID When Abaco launches an actor container, it instructs Docker to execute the process using the UID and GID associated  with the TACC account of the owner of the actor. This practice guarantees that an Abaco actor will have exactly the  same accesses as the original author of the actor (for instance, access to files or directories on shared storage)  and that files created or updated by the actor process will be owned by the underlying API user.  Abaco API users that have elevated privilleges within the platform can override the UID and GID used to run the  actor when registering the actor (see registration)..  POSIX Interface to the TACC WORK File System When Abaco launches an actor container, it mounts the actor owner’s TACC WORK file system into the running container.  The owner’s work file system is made available at /work with the container. This gives the actor a POSIX  interface to the work file system.","<h4>Container UID and GID<a class=""headerlink"" href=""#container-uid-and-gid"" title=""Permalink to this headline"">¶</a></h4>
 <p>When Abaco launches an actor container, it instructs Docker to execute the process using the UID and GID associated
 with the TACC account of the owner of the actor. This practice guarantees that an Abaco actor will have exactly the
 same accesses as the original author of the actor (for instance, access to files or directories on shared storage)
 and that files created or updated by the actor process will be owned by the underlying API user.
 Abaco API users that have elevated privilleges within the platform can override the UID and GID used to run the
 actor when registering the actor (see <span class=""xref std std-ref"">registration</span>).</p>
 </div>
 <div class=""section"" id=""posix-interface-to-the-tacc-work-file-system"">
 <h4>POSIX Interface to the TACC WORK File System<a class=""headerlink"" href=""#posix-interface-to-the-tacc-work-file-system"" title=""Permalink to this headline"">¶</a></h4>
 <p>When Abaco launches an actor container, it mounts the actor owner’s TACC WORK file system into the running container.
 The owner’s work file system is made available at <code class=""docutils literal notranslate""><span class=""pre"">/work</span></code> with the container. This gives the actor a POSIX
 interface to the work file system.</p>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""messages-executions-and-logs"">
"
14,16,"Introduction to Abaco - Messages, Executions, and Logs. Messages, Executions, and Logs Once you have an Abaco actor created the next logical step is to send this actor  some type of job or message detailing what the actor should do. The act of sending  an actor information to execute a job is called sending a message. This sent  message can be raw string data, JSON data, or a binary message. Once a message is sent to an Abaco actor, the actor will create an execution with  a unique execution_id tied to it that will show results, time running, and other  stats which will be listed below. Executions also have logs, and when the log are  called for, you’ll receive the command line logs of your running execution.  Akin to what you’d see if you and outputted a script to the command line.  Details on messages, executions, and logs are below. Note: Due to each message being tied to a specific execution, each execution  will have exactly one message that can be processed.","<h2>Messages, Executions, and Logs<a class=""headerlink"" href=""#messages-executions-and-logs"" title=""Permalink to this headline"">¶</a></h2>
 <p>Once you have an Abaco actor created the next logical step is to send this actor
 some type of job or message detailing what the actor should do. The act of sending
 an actor information to execute a job is called sending a message. This sent
 message can be raw string data, JSON data, or a binary message.</p>
 <p>Once a message is sent to an Abaco actor, the actor will create an execution with
 a unique <code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code> tied to it that will show results, time running, and other
 stats which will be listed below. Executions also have logs, and when the log are
 called for, you’ll receive the command line logs of your running execution.
 Akin to what you’d see if you and outputted a script to the command line.
 Details on messages, executions, and logs are below.</p>
 <p><strong>Note:</strong> Due to each message being tied to a specific execution, each execution
 will have exactly one message that can be processed.</p>
 <div class=""section"" id=""messages"">
"
15,17,"Introduction to Abaco - Messages, Executions, and Logs - Messages. Messages A message is simply the message given to an actor with data that can be used to run  the actor. This data can be in the form of a raw message string, JSON, or binary.  Once this message is sent, the messaged Abaco actor will queue an execution of  the actor’s specified image. Once off the queue, if your specified image has inputs for the messaged data,  then that messaged data will be visible to your program. Allowing you to set  custom parameters or inputs for your executions.","<h3>Messages<a class=""headerlink"" href=""#messages"" title=""Permalink to this headline"">¶</a></h3>
 <p>A message is simply the message given to an actor with data that can be used to run
 the actor. This data can be in the form of a raw message string, JSON, or binary.
 Once this message is sent, the messaged Abaco actor will queue an execution of
 the actor’s specified image.</p>
 <p>Once off the queue, if your specified image has inputs for the messaged data,
 then that messaged data will be visible to your program. Allowing you to set
 custom parameters or inputs for your executions.</p>
 <div class=""section"" id=""sending-a-message"">
"
16,19,"Introduction to Abaco - Messages, Executions, and Logs - Messages - Sending a message - Results. cURL To send a message to the messages endpoint with cURL, you would do the following:. . Python To send a message to the messages endpoint with tapipy and Python, you would do the following:. . Results These calls result in a list similar to the following:","<h5>cURL<a class=""headerlink"" href=""#curl"" title=""Permalink to this headline"">¶</a></h5>
 <p>To send a message to the <code class=""docutils literal notranslate""><span class=""pre"">messages</span></code> endpoint with cURL, you would do the following:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;message=&lt;your content here&gt;&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/messages
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""python"">
 <h5>Python<a class=""headerlink"" href=""#python"" title=""Permalink to this headline"">¶</a></h5>
 <p>To send a message to the <code class=""docutils literal notranslate""><span class=""pre"">messages</span></code> endpoint with <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> and Python, you would do the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">send_message</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;actor_id&gt;&#39;</span><span class=""p"">,</span>
                       <span class=""n"">request_body</span><span class=""o"">=</span><span class=""p"">{</span><span class=""s1"">&#39;message&#39;</span><span class=""p"">:</span><span class=""s1"">&#39;&lt;your content here&gt;&#39;</span><span class=""p"">})</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""results"">
 <h5>Results<a class=""headerlink"" href=""#results"" title=""Permalink to this headline"">¶</a></h5>
 <p>These calls result in a list similar to the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">messages</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">actors</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">NPpjZkmZ4elY8</span><span class=""o"">/</span><span class=""n"">messages</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">jstubbs</span>
 <span class=""n"">execution_id</span><span class=""p"">:</span> <span class=""n"">WrMk5EPmwYoL6</span>
 <span class=""n"">msg</span><span class=""p"">:</span> <span class=""o"">&lt;</span><span class=""n"">your</span> <span class=""n"">content</span> <span class=""n"">here</span><span class=""o"">&gt;</span>
 </pre></div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""get-message-count"">
"
17,21,"Introduction to Abaco - Messages, Executions, and Logs - Messages - Get message count - Results. cURL The following retrieves the current number of messages an actor has:. . Python To retrieve the current number of messages with tapipy the following is done:. . Results The result of getting the messages endpoint should be similar to:","<h5>cURL<a class=""headerlink"" href=""#id4"" title=""Permalink to this headline"">¶</a></h5>
 <p>The following retrieves the current number of messages an actor has:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/messages
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id5"">
 <h5>Python<a class=""headerlink"" href=""#id5"" title=""Permalink to this headline"">¶</a></h5>
 <p>To retrieve the current number of messages with <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> the following is done:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">get_messages</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;actor_id&gt;&#39;</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id6"">
 <h5>Results<a class=""headerlink"" href=""#id6"" title=""Permalink to this headline"">¶</a></h5>
 <p>The result of getting the <code class=""docutils literal notranslate""><span class=""pre"">messages</span></code> endpoint should be similar to:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>_links:
 owner: https://tacc.tapis.io/profiles/v3/jstubbs
 messages: <span class=""m"">12</span>
 </pre></div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""binary-messages"">
"
18,22,"Introduction to Abaco - Messages, Executions, and Logs - Messages - Binary Messages. Binary Messages An additional feature of the Abaco message system is the ability to post binary  data. This data, unlike raw string data, is sent through a Unix Named Pipe  (FIFO), stored at /_abaco_binary_data, and can be retrieved from within the  execution using a FIFO message reading function. The ability to read binary  data like this allows our end users to do numerous tasks such as reading in  photos, reading in code to be ran, and much more. The following is an example of sending a JPEG as a binary message in order to  be read in by a TensorFlow image classifier and being returned predicted image  labels. For example, sending a photo of a golden retriever might yield, 80%  golden retriever, 12% labrador, and 8% clock. This example uses Python and tapipy in order to keep code in one script.","<h4>Binary Messages<a class=""headerlink"" href=""#binary-messages"" title=""Permalink to this headline"">¶</a></h4>
 <p>An additional feature of the Abaco message system is the ability to post binary
 data. This data, unlike raw string data, is sent through a Unix Named Pipe
 (FIFO), stored at /_abaco_binary_data, and can be retrieved from within the
 execution using a FIFO message reading function. The ability to read binary
 data like this allows our end users to do numerous tasks such as reading in
 photos, reading in code to be ran, and much more.</p>
 <p>The following is an example of sending a JPEG as a binary message in order to
 be read in by a TensorFlow image classifier and being returned predicted image
 labels. For example, sending a photo of a golden retriever might yield, 80%
 golden retriever, 12% labrador, and 8% clock.</p>
 <p>This example uses Python and <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> in order to keep code in one script.</p>
 <div class=""section"" id=""python-with-tapipy"">
"
19,23,"Introduction to Abaco - Messages, Executions, and Logs - Messages - Binary Messages - cURL. Python with Tapipy Setting up an Tapis object with token and API address information:. Creating actor with the TensorFlow image classifier docker image:. The following creates a binary message from a JPEG image file:. Sending binary JPEG file to actor as message with the sendBinaryMessage function (You can  also just set the headers with Content-Type: application/octet-stream):. The following returns information pertaining to the execution:. Once the execution has complete, the logs can be called with the following:. . Sending binary from execution Another useful feature of Abaco is the ability to write to a socket connected  to an Abaco endpoint from within an execution. This Unix Domain (Datagram)  socker is mounted in the actor container at /_abaco_results.sock. In order to write binary data this socket you can use tapipy functions,  in particular the send_bytes_result() function that sends bytes as single  result to the socket. Another useful function is the send_python_result()  function that allows you to send any Python object that can be pickled with  cloudpickle. In order to retrieve these results from Abaco you can get the  /actors/<actor_id>/executions/<execution_id>/results endpoint. Each get of  the endpoint will result in exactly one result being popped and retrieved. An  empty result with be returned if the results queue is empty. As a socket, the maximum size of a result is 131072 bytes. An execution can  send multiple results to the socket and said results will be added to a queue.  It is recommended to to return a reference to a file or object store. As well, results are sent to the socket and available immediately, an execution  does not have to complete to pop a result. Results are given an expiry time of  60 minutes from creation..  cURL To retrieve a result with cURL you would do the following:","<h5>Python with Tapipy<a class=""headerlink"" href=""#python-with-tapipy"" title=""Permalink to this headline"">¶</a></h5>
 <p>Setting up an <code class=""docutils literal notranslate""><span class=""pre"">Tapis</span></code> object with token and API address information:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">from</span> <span class=""nn"">tapipy.tapis</span> <span class=""kn"">import</span> <span class=""n"">Tapis</span>
 <span class=""n"">t</span> <span class=""o"">=</span> <span class=""n"">Tapis</span><span class=""p"">(</span><span class=""n"">api_server</span><span class=""o"">=</span><span class=""s1"">&#39;https://tacc.tapis.io&#39;</span><span class=""p"">,</span> <span class=""n"">username</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;username&gt;&#39;</span><span class=""p"">,</span> <span class=""n"">password</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;password&gt;&#39;</span><span class=""p"">)</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">get_tokens</span><span class=""p"">()</span>
 </pre></div>
 </div>
 <p>Creating actor with the TensorFlow image classifier docker image:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">my_actor</span> <span class=""o"">=</span> <span class=""p"">{</span><span class=""s1"">&#39;image&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;abacosamples/binary_message_classifier&#39;</span><span class=""p"">,</span>
             <span class=""s1"">&#39;name&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;JPEG_classifier&#39;</span><span class=""p"">,</span>
             <span class=""s1"">&#39;description&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;Labels a read in binary image&#39;</span><span class=""p"">}</span>
 <span class=""n"">actor_data</span> <span class=""o"">=</span> <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">create_actor</span><span class=""p"">(</span><span class=""o"">**</span><span class=""n"">my_actor</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>The following creates a binary message from a JPEG image file:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""k"">with</span> <span class=""nb"">open</span><span class=""p"">(</span><span class=""s1"">&#39;&lt;path to jpeg image here&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;rb&#39;</span><span class=""p"">)</span> <span class=""k"">as</span> <span class=""n"">file</span><span class=""p"">:</span>
     <span class=""n"">binary_image</span> <span class=""o"">=</span> <span class=""n"">file</span><span class=""o"">.</span><span class=""n"">read</span><span class=""p"">()</span>
 </pre></div>
 </div>
 <p>Sending binary JPEG file to actor as message with the sendBinaryMessage function (You can
 also just set the headers with <code class=""docutils literal notranslate""><span class=""pre"">Content-Type:</span> <span class=""pre"">application/octet-stream</span></code>):</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">result</span> <span class=""o"">=</span> <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">send_binary_message</span><span class=""p"">(</span><span class=""n"">actor_id</span> <span class=""o"">=</span> <span class=""n"">actor_data</span><span class=""o"">.</span><span class=""n"">id</span><span class=""p"">,</span>
                                     <span class=""n"">request_body</span> <span class=""o"">=</span> <span class=""n"">binary_image</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>The following returns information pertaining to the execution:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">execution</span> <span class=""o"">=</span> <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">get_execution</span><span class=""p"">(</span><span class=""n"">actor_id</span> <span class=""o"">=</span> <span class=""n"">actor_data</span><span class=""o"">.</span><span class=""n"">id</span><span class=""p"">,</span>
                                    <span class=""n"">execution_id</span> <span class=""o"">=</span> <span class=""n"">result</span><span class=""o"">.</span><span class=""n"">execution_id</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>Once the execution has complete, the logs can be called with the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">exec_logs</span> <span class=""o"">=</span> <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">get_execution_logs</span><span class=""p"">(</span><span class=""n"">actor_id</span> <span class=""o"">=</span> <span class=""n"">actor_data</span><span class=""o"">.</span><span class=""n"">id</span><span class=""p"">,</span>
                                         <span class=""n"">execution_id</span> <span class=""o"">=</span> <span class=""n"">result</span><span class=""o"">.</span><span class=""n"">execution_id</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""sending-binary-from-execution"">
 <h5>Sending binary from execution<a class=""headerlink"" href=""#sending-binary-from-execution"" title=""Permalink to this headline"">¶</a></h5>
 <p>Another useful feature of Abaco is the ability to write to a socket connected
 to an Abaco endpoint from within an execution. This Unix Domain (Datagram)
 socker is mounted in the actor container at /_abaco_results.sock.</p>
 <p>In order to write binary data this socket you can use <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> functions,
 in particular the <code class=""docutils literal notranslate""><span class=""pre"">send_bytes_result()</span></code> function that sends bytes as single
 result to the socket. Another useful function is the <code class=""docutils literal notranslate""><span class=""pre"">send_python_result()</span></code>
 function that allows you to send any Python object that can be pickled with
 <code class=""docutils literal notranslate""><span class=""pre"">cloudpickle</span></code>.</p>
 <p>In order to retrieve these results from Abaco you can get the
 <code class=""docutils literal notranslate""><span class=""pre"">/actors/&lt;actor_id&gt;/executions/&lt;execution_id&gt;/results</span></code> endpoint. Each get of
 the endpoint will result in exactly one result being popped and retrieved. An
 empty result with be returned if the results queue is empty.</p>
 <p>As a socket, the maximum size of a result is 131072 bytes. An execution can
 send multiple results to the socket and said results will be added to a queue.
 It is recommended to to return a reference to a file or object store.</p>
 <p>As well, results are sent to the socket and available immediately, an execution
 does not have to complete to pop a result. Results are given an expiry time of
 60 minutes from creation.</p>
 </div>
 <div class=""section"" id=""id7"">
 <h5>cURL<a class=""headerlink"" href=""#id7"" title=""Permalink to this headline"">¶</a></h5>
 <p>To retrieve a result with cURL you would do the following:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;message=&lt;your content here&gt;&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/executions/&lt;execution_id&gt;/results
 </pre></div>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""synchronous-messaging"">
"
20,24,"Introduction to Abaco - Messages, Executions, and Logs - Messages - Synchronous Messaging. Synchronous Messaging. Important Support for Synchronous Messaging was added in version 1.1.0.. Starting with 1.1.0, Abaco provides support for sending a synchronous message to an actor; that is, the client  sends the actor a message and the request blocks until the execution completes. The result of the execution is returned  as an HTTP response to the original message request. Synchronous messaging prevents the client from needing to poll the executions endpoint to determine when an execution  completes. By eliminating this polling and returning the response as soon as it is ready, the overall latency  is minimized. While synchronous messaging can simplify client code and improve performance, it introduces some additional challenges.  Primarily, if the execution cannot be completed within the HTTP request/response window, the request will time out.  This window is usually about 30 seconds.. Warning Abaco strictly adheres to message ordering and, in particular, synchronous messages do not skip to the front of the  actor’s message queue. Therefore, a synchronous message and all queued messages must be processed within the HTTP  timeout window. To avoid excessive synchronous message requests, Abaco will return a 400 level request if the actor  already has more than 3 queued messages at the time of the synchronous message request.. To send a synchronous message, the client appends _abaco_synchronous=true query parameter to the request; the rest of  the messaging semantics follows the rules and conventions of asynchronous messages.","<h4>Synchronous Messaging<a class=""headerlink"" href=""#synchronous-messaging"" title=""Permalink to this headline"">¶</a></h4>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">Support for Synchronous Messaging was added in version 1.1.0.</p>
 </div>
 <p>Starting with <cite>1.1.0</cite>, Abaco provides support for sending a synchronous message to an actor; that is, the client
 sends the actor a message and the request blocks until the execution completes. The result of the execution is returned
 as an HTTP response to the original message request.</p>
 <p>Synchronous messaging prevents the client from needing to poll the executions endpoint to determine when an execution
 completes. By eliminating this polling and returning the response as soon as it is ready, the overall latency
 is minimized.</p>
 <p>While synchronous messaging can simplify client code and improve performance, it introduces some additional challenges.
 Primarily, if the execution cannot be completed within the HTTP request/response window, the request will time out.
 This window is usually about 30 seconds.</p>
 <div class=""admonition warning"">
 <p class=""first admonition-title"">Warning</p>
 <p class=""last"">Abaco strictly adheres to message ordering and, in particular, synchronous messages do not skip to the front of the
 actor’s message queue. Therefore, a synchronous message <em>and all queued messages</em> must be processed within the HTTP
 timeout window. To avoid excessive synchronous message requests, Abaco will return a 400 level request if the actor
 already has more than 3 queued messages at the time of the synchronous message request.</p>
 </div>
 <p>To send a synchronous message, the client appends <cite>_abaco_synchronous=true</cite> query parameter to the request; the rest of
 the messaging semantics follows the rules and conventions of asynchronous messages.</p>
 <div class=""section"" id=""id8"">
"
21,25,"Introduction to Abaco - Messages, Executions, and Logs - Messages - Synchronous Messaging - cURL. cURL The following example uses the curl command line client to send a synchronous message:. As stated above, the request blocks until the execution (and all previous executions queued for the actor) completes.  To make the response to a synchronous message request, Abaco uses the following rules:.  If a (binary) result is registered by the actor for the execution, that result is returned with along with a content-type application/octet-stream. If no result is available when the execution completes, the logs associated with the execution are returned with content-type text/html (charset utf8 is assumed).","<h5>cURL<a class=""headerlink"" href=""#id8"" title=""Permalink to this headline"">¶</a></h5>
 <p>The following example uses the curl command line client to send a synchronous message:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;message=&lt;your content here&gt;&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/messages?_abaco_synchronous<span class=""o"">=</span><span class=""nb"">true</span>
 </pre></div>
 </div>
 <p>As stated above, the request blocks until the execution (and all previous executions queued for the actor) completes.
 To make the response to a synchronous message request, Abaco uses the following rules:</p>
 <blockquote>
 <div><ol class=""arabic simple"">
 <li>If a (binary) result is registered by the actor for the execution, that result is returned with along with a content-type <cite>application/octet-stream</cite>.</li>
 <li>If no result is available when the execution completes, the logs associated with the execution are returned with content-type <cite>text/html</cite> (charset utf8 is assumed).</li>
 </ol>
 </div></blockquote>
 </div>
 </div>
 </div>
 <div class=""section"" id=""executions"">
"
22,26,"Introduction to Abaco - Messages, Executions, and Logs - Executions. Executions Once you send a message to an actor, that actor will create an execution for the actor  with the inputted data. This execution will be queued waiting for a worker to spool up  or waiting for a worker to be freed. When the execution is initially created it is  given an execution_id so that you can access information about it using the execution_id endpoint.","<h3>Executions<a class=""headerlink"" href=""#executions"" title=""Permalink to this headline"">¶</a></h3>
 <p>Once you send a message to an actor, that actor will create an execution for the actor
 with the inputted data. This execution will be queued waiting for a worker to spool up
 or waiting for a worker to be freed. When the execution is initially created it is
 given an execution_id so that you can access information about it using the execution_id endpoint.</p>
 <div class=""section"" id=""access-execution-data"">
"
23,28,"Introduction to Abaco - Messages, Executions, and Logs - Executions - Access execution data - Results. cURL You can access the execution_id endpoint using cURL with the following:. . Python You can access the execution_id endpoint using tapipy and Python with the following:. . Results Access the execution_id endpoint will result in something similar to the following:","<h5>cURL<a class=""headerlink"" href=""#id9"" title=""Permalink to this headline"">¶</a></h5>
 <p>You can access the <code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code> endpoint using cURL with the following:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/executions/&lt;execution_id&gt;
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id10"">
 <h5>Python<a class=""headerlink"" href=""#id10"" title=""Permalink to this headline"">¶</a></h5>
 <p>You can access the <code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code> endpoint using <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> and Python with the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">get_execution</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;actor_id&gt;&#39;</span><span class=""p"">,</span>
                        <span class=""n"">execution_id</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;execution_id&gt;&#39;</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id11"">
 <h5>Results<a class=""headerlink"" href=""#id11"" title=""Permalink to this headline"">¶</a></h5>
 <p>Access the <code class=""docutils literal notranslate""><span class=""pre"">execution_id</span></code> endpoint will result in something similar to the following:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">logs</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">actors</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">JWpkNmBwKewYo</span><span class=""o"">/</span><span class=""n"">executions</span><span class=""o"">/</span><span class=""n"">kA1P1m8NkkolK</span><span class=""o"">/</span><span class=""n"">logs</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">jstubbs</span>
 <span class=""n"">actor_id</span><span class=""p"">:</span> <span class=""n"">JWpkNmBwKewYo</span>
 <span class=""n"">api_server</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">tacc</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span>
 <span class=""n"">cpu</span><span class=""p"">:</span> <span class=""mi"">9678006850</span>
 <span class=""n"">executor</span><span class=""p"">:</span> <span class=""n"">jstubbs</span>
 <span class=""n"">exitCode</span><span class=""p"">:</span> <span class=""mi"">1</span>
 <span class=""n"">final_state</span><span class=""p"">:</span>
 <span class=""n"">Dead</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Error</span><span class=""p"">:</span>
 <span class=""n"">ExitCode</span><span class=""p"">:</span> <span class=""mi"">1</span>
 <span class=""n"">FinishedAt</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">49.77</span><span class=""n"">Z0</span>
 <span class=""n"">OOMKilled</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Paused</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Pid</span><span class=""p"">:</span> <span class=""mi"">0</span>
 <span class=""n"">Restarting</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">Running</span><span class=""p"">:</span> <span class=""kc"">False</span>
 <span class=""n"">StartedAt</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">45.24</span><span class=""n"">Z0</span>
 <span class=""n"">Status</span><span class=""p"">:</span> <span class=""n"">exited</span>
 <span class=""n"">finish_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">49.77</span><span class=""n"">Z0</span>
 <span class=""nb"">id</span><span class=""p"">:</span> <span class=""n"">kA1P1m8NkkolK</span>
 <span class=""n"">io</span><span class=""p"">:</span> <span class=""mi"">152287298</span>
 <span class=""n"">message_received_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">44.367</span><span class=""n"">Z</span>
 <span class=""n"">runtime</span><span class=""p"">:</span> <span class=""mi"">5</span>
 <span class=""n"">start_time</span><span class=""p"">:</span> <span class=""mi"">2020</span><span class=""o"">-</span><span class=""mi"">10</span><span class=""o"">-</span><span class=""mi"">21</span><span class=""n"">T17</span><span class=""p"">:</span><span class=""mi"">26</span><span class=""p"">:</span><span class=""mf"">44.841</span><span class=""n"">Z</span>
 <span class=""n"">status</span><span class=""p"">:</span> <span class=""n"">COMPLETE</span>
 <span class=""n"">worker_id</span><span class=""p"">:</span> <span class=""n"">QBmoQx4pOx1oA</span>
 </pre></div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""list-executions"">
"
24,30,"Introduction to Abaco - Messages, Executions, and Logs - Executions - List executions - Results. cURL List executions with cURL by getting the executions endpoint. . Python To list executions with tapipy the following is done:. . Results Calling the list of executions should result in something similar to:","<h5>cURL<a class=""headerlink"" href=""#id12"" title=""Permalink to this headline"">¶</a></h5>
 <p>List executions with cURL by getting the <code class=""docutils literal notranslate""><span class=""pre"">executions</span> <span class=""pre"">endpoint</span></code></p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/executions
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id13"">
 <h5>Python<a class=""headerlink"" href=""#id13"" title=""Permalink to this headline"">¶</a></h5>
 <p>To list executions with <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> the following is done:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">list_executions</span><span class=""p"">(</span><span class=""n"">actor_id</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;actor_id&gt;&#39;</span><span class=""p"">)</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id14"">
 <h5>Results<a class=""headerlink"" href=""#id14"" title=""Permalink to this headline"">¶</a></h5>
 <p>Calling the list of executions should result in something similar to:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">_links</span><span class=""p"">:</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">master</span><span class=""o"">.</span><span class=""n"">staging</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span><span class=""o"">/</span><span class=""n"">profiles</span><span class=""o"">/</span><span class=""n"">v3</span><span class=""o"">/</span><span class=""n"">abaco</span>
 <span class=""n"">actor_id</span><span class=""p"">:</span> <span class=""n"">WP7vMmRvrDXxN</span>
 <span class=""n"">api_server</span><span class=""p"">:</span> <span class=""n"">https</span><span class=""p"">:</span><span class=""o"">//</span><span class=""n"">master</span><span class=""o"">.</span><span class=""n"">staging</span><span class=""o"">.</span><span class=""n"">tapis</span><span class=""o"">.</span><span class=""n"">io</span>
 <span class=""n"">executions</span><span class=""p"">:</span> <span class=""p"">[</span>
 <span class=""n"">finish_time</span><span class=""p"">:</span> <span class=""n"">Wed</span><span class=""p"">,</span> <span class=""mi"">21</span> <span class=""n"">Oct</span> <span class=""mi"">2020</span> <span class=""mi"">17</span><span class=""p"">:</span><span class=""mi"">48</span><span class=""p"">:</span><span class=""mi"">33</span> <span class=""n"">GMT</span>
 <span class=""nb"">id</span><span class=""p"">:</span> <span class=""n"">QBmoQx4pOx1oA</span>
 <span class=""n"">message_received_time</span><span class=""p"">:</span> <span class=""n"">Wed</span><span class=""p"">,</span> <span class=""mi"">21</span> <span class=""n"">Oct</span> <span class=""mi"">2020</span> <span class=""mi"">17</span><span class=""p"">:</span><span class=""mi"">48</span><span class=""p"">:</span><span class=""mi"">20</span> <span class=""n"">GMT</span>
 <span class=""n"">start_time</span><span class=""p"">:</span> <span class=""n"">Wed</span><span class=""p"">,</span> <span class=""mi"">21</span> <span class=""n"">Oct</span> <span class=""mi"">2020</span> <span class=""mi"">17</span><span class=""p"">:</span><span class=""mi"">48</span><span class=""p"">:</span><span class=""mi"">20</span> <span class=""n"">GMT</span>
 <span class=""n"">status</span><span class=""p"">:</span> <span class=""n"">COMPLETE</span><span class=""p"">,</span>
 <span class=""n"">finish_time</span><span class=""p"">:</span> <span class=""kc"">None</span>
 <span class=""nb"">id</span><span class=""p"">:</span> <span class=""n"">QZY8W1Z30Zmbq</span>
 <span class=""n"">message_received_time</span><span class=""p"">:</span> <span class=""n"">Wed</span><span class=""p"">,</span> <span class=""mi"">21</span> <span class=""n"">Oct</span> <span class=""mi"">2020</span> <span class=""mi"">17</span><span class=""p"">:</span><span class=""mi"">49</span><span class=""p"">:</span><span class=""mi"">56</span> <span class=""n"">GMT</span>
 <span class=""n"">start_time</span><span class=""p"">:</span> <span class=""kc"">None</span>
 <span class=""n"">status</span><span class=""p"">:</span> <span class=""n"">SUBMITTED</span><span class=""p"">]</span>
 <span class=""n"">owner</span><span class=""p"">:</span> <span class=""n"">abaco</span>
 <span class=""n"">totalCpu</span><span class=""p"">:</span> <span class=""mi"">61248097463</span>
 <span class=""n"">totalExecutions</span><span class=""p"">:</span> <span class=""mi"">2</span>
 <span class=""n"">totalIo</span><span class=""p"">:</span> <span class=""mi"">752526010</span>
 <span class=""n"">totalRuntime</span><span class=""p"">:</span> <span class=""mi"">13</span>
 </pre></div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""reading-message-in-execution"">
"
25,32,"Introduction to Abaco - Messages, Executions, and Logs - Executions - Reading message in execution - Python - Reading in binary. Python - Reading in raw string data or JSON To retrieve JSON or raw data from inside of an execution using Python and  tapipy, you would get the message context from within the actor and then  get it’s raw_message field.. . Python - Reading in binary Binary data is transmitted to an execution through a FIFO pipe located at  /_abaco_binary_data. Reading from a pipe is similar to reading from a regular  file, however tapipy comes with an easy to use get_binary_message()  function to retrieve the binary data. Note: Each Abaco execution processes one message, binary or not. This means  that reading from the FIFO pipe will result with exactly the entire sent  message.","<h5>Python - Reading in raw string data or JSON<a class=""headerlink"" href=""#python-reading-in-raw-string-data-or-json"" title=""Permalink to this headline"">¶</a></h5>
 <p>To retrieve JSON or raw data from inside of an execution using Python and
 <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code>, you would get the message context from within the actor and then
 get it’s <code class=""docutils literal notranslate""><span class=""pre"">raw_message</span></code> field.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">from</span> <span class=""nn"">tapipy.actors</span> <span class=""kn"">import</span> <span class=""n"">get_context</span>
 
 <span class=""n"">context</span> <span class=""o"">=</span> <span class=""n"">get_context</span><span class=""p"">()</span>
 <span class=""n"">message</span> <span class=""o"">=</span> <span class=""n"">context</span><span class=""p"">[</span><span class=""s1"">&#39;raw_message&#39;</span><span class=""p"">]</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""python-reading-in-binary"">
 <h5>Python - Reading in binary<a class=""headerlink"" href=""#python-reading-in-binary"" title=""Permalink to this headline"">¶</a></h5>
 <p>Binary data is transmitted to an execution through a FIFO pipe located at
 /_abaco_binary_data. Reading from a pipe is similar to reading from a regular
 file, however <code class=""docutils literal notranslate""><span class=""pre"">tapipy</span></code> comes with an easy to use <code class=""docutils literal notranslate""><span class=""pre"">get_binary_message()</span></code>
 function to retrieve the binary data.</p>
 <p><strong>Note:</strong> Each Abaco execution processes one message, binary or not. This means
 that reading from the FIFO pipe will result with exactly the entire sent
 message.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">from</span> <span class=""nn"">tapipy.actors</span> <span class=""kn"">import</span> <span class=""n"">get_binary_message</span>
 
 <span class=""n"">bin_message</span> <span class=""o"">=</span> <span class=""n"">get_binary_message</span><span class=""p"">()</span>
 </pre></div>
 </div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""logs"">
"
26,33,"Introduction to Abaco - Messages, Executions, and Logs - Logs. Logs At any point of an execution you are also able to access the execution logs  using the logs endpoint. This returns information  about the log along with the log itself. If the execution is still in the  submitted phase, then the log will be an empty string, but once the execution  is in the completed phase the log would contain all outputted command line data.","<h3>Logs<a class=""headerlink"" href=""#logs"" title=""Permalink to this headline"">¶</a></h3>
 <p>At any point of an execution you are also able to access the execution logs
 using the <code class=""docutils literal notranslate""><span class=""pre"">logs</span></code> endpoint. This returns information
 about the log along with the log itself. If the execution is still in the
 submitted phase, then the log will be an empty string, but once the execution
 is in the completed phase the log would contain all outputted command line data.</p>
 <div class=""section"" id=""retrieving-an-executions-logs"">
"
27,36,"Introduction to Abaco - Database Search. Database Search With the introduction of Abaco 1.6.0 database searching has been introduced using  the Mongo aggregation system, full-text searching, and indexing. Searching can be  done on actor, worker, execution, and log information. This feature allows for users  to search based on any information across all objects that they have permission  to view. For example, search would allow checking of all viewable executions for  ERRORS in one easy call. The search currently makes use of logical operators and  datetime to allow for easy searching of any object based on any specific field.. Attention Search in Abaco was implemented in version 1.6.0.. Search is available on the actors, workers, executions, and logs databases. Search  has been implemented on a new {base}/actors/search/{database} endpoint alongside being  implemented on the {base}/actors, {base}/actors/{actor_id}/workers,  {base}/actors/{actor_id}/executions, and  ``{base}/actors/{actor_id}/executions/{execution_id}/logs``endpoints. To use search on the {base}/actors/search/{database} endpoint the database to be searched  must be specified as either actors, workers, executions, or logs in the URL.  With no query arguments Abaco will return all entries in the database that you have  permission to view. To specify query arguments the user can add a ? to the end of  their url and specify the parameters they are looking to implement. A table of search parameters, their function, and examples are below.. . . . Parameter relates to Function relates to Examples. . . search relates to Completes a fuzzy full-text search based on inputs. Returns results by best accuracy/score. relates to ?search=stringToSearchFor. . exactsearch relates to Completes a full-text search and looks for exact matches with inputs. relates to ?exactsearch=stringToMatchExactly. . eq relates to Checks if given value is equal to db value matching given key. relates to ?id.eq=AKY5o4Z847lB3. . neq relates to Checks if given value is not equal to db value matching given key. relates to ?id.neq=AKY5o4Z847lB3. . gt relates to Checks if given value is greater than db value matching given key. relates to ?start_time.gt=2020-04-29+06:00. . gte relates to Checks if given value is greater than or equal to db value matching given key. relates to ?runtime.gte=423. . lt relates to Checks if given value is less than db value matching given key. relates to ?message_received_time.lt=2020. . lte relates to Checks if given value is less than or equal to db value matching given key. relates to ?final_state.FinishedAt.lte=2020-04-29. . in relates to Checks if db value matching given key match any values in the given list of values. relates to ?status.in=[“BUSY”,”REQUESTED”,”READY”]. . nin relates to Checks if db value matching given key does not match any values in the given list of values. relates to ?status.nin=[“COMPLETED”, “READY”]. . like relates to Checks if given value in (through regex) db value matching given key. relates to ?image.like=abaco_docker_username. . nlike relates to Checks if given value not in (through regex) db value matching given key. relates to ?image.nlike=abaco_test. . between relates to Checks if db value matching given key is greater than or equal to first given value, and less than or equal to second given value. relates to ?start_time.between=  2020-04-29T20:15:52:246Z,  2021-06-24-05:00. . limit relates to Sets a limit on total amount of results returned. Defaults to 10 results. relates to ?limit=20. . skip relates to Skips a specified amount of results when returning. relates to ?skip=4. . . You may use as many parameters as you want in one query sans limit and skip, where each may only be used once.","<h2>Database Search<a class=""headerlink"" href=""#database-search"" title=""Permalink to this headline"">¶</a></h2>
 <p>With the introduction of Abaco 1.6.0 database searching has been introduced using
 the Mongo aggregation system, full-text searching, and indexing. Searching can be
 done on actor, worker, execution, and log information. This feature allows for users
 to search based on any information across all objects that they have permission
 to view. For example, search would allow checking of all viewable executions for
 ERRORS in one easy call. The search currently makes use of logical operators and
 datetime to allow for easy searching of any object based on any specific field.</p>
 <div class=""admonition attention"">
 <p class=""first admonition-title"">Attention</p>
 <p class=""last"">Search in Abaco was implemented in version 1.6.0.</p>
 </div>
 <p>Search is available on the actors, workers, executions, and logs databases. Search
 has been implemented on a new <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/search/{database}</span></code> endpoint alongside being
 implemented on the <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/{actor_id}/workers</span></code>,
 <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/{actor_id}/executions</span></code>, and
 <a href=""#id18""><span class=""problematic"" id=""id19"">``</span></a>{base}/actors/{actor_id}/executions/{execution_id}/logs``endpoints.</p>
 <p>To use search on the <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/search/{database}</span></code> endpoint the database to be searched
 must be specified as either <code class=""docutils literal notranslate""><span class=""pre"">actors</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">workers</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">executions</span></code>, or <code class=""docutils literal notranslate""><span class=""pre"">logs</span></code> in the URL.
 With no query arguments Abaco will return all entries in the database that you have
 permission to view. To specify query arguments the user can add a <code class=""docutils literal notranslate""><span class=""pre"">?</span></code> to the end of
 their url and specify the parameters they are looking to implement.</p>
 <p>A table of search parameters, their function, and examples are below.</p>
 <table border=""1"" class=""docutils"">
 <colgroup>
 <col width=""7%"" />
 <col width=""71%"" />
 <col width=""22%"" />
 </colgroup>
 <thead valign=""bottom"">
 <tr class=""row-odd""><th class=""head"">Parameter</th>
 <th class=""head"">Function</th>
 <th class=""head"">Examples</th>
 </tr>
 </thead>
 <tbody valign=""top"">
 <tr class=""row-even""><td>search</td>
 <td>Completes a fuzzy full-text search based on inputs. Returns results by best accuracy/score.</td>
 <td>?search=stringToSearchFor</td>
 </tr>
 <tr class=""row-odd""><td>exactsearch</td>
 <td>Completes a full-text search and looks for exact matches with inputs.</td>
 <td>?exactsearch=stringToMatchExactly</td>
 </tr>
 <tr class=""row-even""><td>eq</td>
 <td>Checks if given value is equal to db value matching given key.</td>
 <td>?id.eq=AKY5o4Z847lB3</td>
 </tr>
 <tr class=""row-odd""><td>neq</td>
 <td>Checks if given value is not equal to db value matching given key.</td>
 <td>?id.neq=AKY5o4Z847lB3</td>
 </tr>
 <tr class=""row-even""><td>gt</td>
 <td>Checks if given value is greater than db value matching given key.</td>
 <td>?start_time.gt=2020-04-29+06:00</td>
 </tr>
 <tr class=""row-odd""><td>gte</td>
 <td>Checks if given value is greater than or equal to db value matching given key.</td>
 <td>?runtime.gte=423</td>
 </tr>
 <tr class=""row-even""><td>lt</td>
 <td>Checks if given value is less than db value matching given key.</td>
 <td>?message_received_time.lt=2020</td>
 </tr>
 <tr class=""row-odd""><td>lte</td>
 <td>Checks if given value is less than or equal to db value matching given key.</td>
 <td>?final_state.FinishedAt.lte=2020-04-29</td>
 </tr>
 <tr class=""row-even""><td>in</td>
 <td>Checks if db value matching given key match any values in the given list of values.</td>
 <td>?status.in=[“BUSY”,”REQUESTED”,”READY”]</td>
 </tr>
 <tr class=""row-odd""><td>nin</td>
 <td>Checks if db value matching given key does not match any values in the given list of values.</td>
 <td>?status.nin=[“COMPLETED”, “READY”]</td>
 </tr>
 <tr class=""row-even""><td>like</td>
 <td>Checks if given value in (through regex) db value matching given key.</td>
 <td>?image.like=abaco_docker_username</td>
 </tr>
 <tr class=""row-odd""><td>nlike</td>
 <td>Checks if given value not in (through regex) db value matching given key.</td>
 <td>?image.nlike=abaco_test</td>
 </tr>
 <tr class=""row-even""><td>between</td>
 <td>Checks if db value matching given key is greater than or equal to first given value, and less than or equal to second given value.</td>
 <td>?start_time.between=
 2020-04-29T20:15:52:246Z,
 2021-06-24-05:00</td>
 </tr>
 <tr class=""row-odd""><td>limit</td>
 <td>Sets a limit on total amount of results returned. Defaults to 10 results.</td>
 <td>?limit=20</td>
 </tr>
 <tr class=""row-even""><td>skip</td>
 <td>Skips a specified amount of results when returning.</td>
 <td>?skip=4</td>
 </tr>
 </tbody>
 </table>
 <p>You may use as many parameters as you want in one query sans <code class=""docutils literal notranslate""><span class=""pre"">limit</span></code> and <code class=""docutils literal notranslate""><span class=""pre"">skip</span></code>, where each may only be used once.</p>
 <hr class=""docutils"" />
 <div class=""section"" id=""metadata"">
"
28,37,"Introduction to Abaco - Database Search - Inputs. Metadata Abaco search slightly alters the expected result of a request in the fact that the returned  result from a search now returns two objects, the expected result, search, and _metadata. This new _metadata object returns pertinent information about the amount of records returned,  the amount of records the return is limited to, the amount of records skipped (specified in query),  and the total amount of records that match the query searched for. This is useful to implement paging  or to only receive a set amount of records.. Important A new _metadata object is now returned alongside the usual result in result.. . . Inputs All inputs are given to the search function as query parameters and thus are converted  to strings. It is then up to Abaco’s side to convert these inputs back to the intended  formats. Strings are left untouched. Booleans are expected to be “False” or “false” and  “True” or “true” to be converted. Numbers are converted all to floats, these are still  comparable to database instances of int, so there should be no issue. Lists are parsed  with json.loads and will accept either [""test""] or ['test'] with post-processing  on Abaco’s end to convert to lists. The last consumed input type is datetime objects. Abaco accepts a broad range of ISO 8601  like strings. An example of the most detailed string accepted is 2020-04-29T20:15:52:246252-06:00.  2020-04-29T20:15:52:246Z, 2020-04-29T20:15:52-06:00, 2020-04-29T20:15-06:00,  2020-04-29T20-06:00, 2020-04-29-06:00, 2020-04Z, and 2020 are also acceptable.. Attention Abaco stores all times in UTC, so addition of your timezone or conversion to UTC is  important. If no timezone information is given (-06:00 or Z (to signal UTC))  the datetime is assumed to be in UTC..  Important Comparison with datetime rounds to the minimum time possible. For instance if you want  to see if 2020-12-30 is greater than 2020, you would receive True as 2020 is rounded  to 2020-01-01T00:00:00Z. This holds true until you reach millisecond accurate time.","<h3>Metadata<a class=""headerlink"" href=""#metadata"" title=""Permalink to this headline"">¶</a></h3>
 <p>Abaco search slightly alters the expected result of a request in the fact that the returned
 result from a search now returns two objects, the expected result, <code class=""docutils literal notranslate""><span class=""pre"">search</span></code>, and <code class=""docutils literal notranslate""><span class=""pre"">_metadata</span></code>.</p>
 <p>This new <code class=""docutils literal notranslate""><span class=""pre"">_metadata</span></code> object returns pertinent information about the amount of records returned,
 the amount of records the return is limited to, the amount of records skipped (specified in query),
 and the total amount of records that match the query searched for. This is useful to implement paging
 or to only receive a set amount of records.</p>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">A new <code class=""docutils literal notranslate""><span class=""pre"">_metadata</span></code> object is now returned alongside the usual result in <code class=""docutils literal notranslate""><span class=""pre"">result.</span></code></p>
 </div>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span><span class=""s1"">&#39;message&#39;</span>: <span class=""s1"">&#39;Executions search completed successfully.&#39;</span>,
  <span class=""s1"">&#39;result&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;_metadata&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;count_returned&#39;</span>: <span class=""m"">1</span>,
                          <span class=""s1"">&#39;record_limit&#39;</span>: <span class=""m"">10</span>,
                          <span class=""s1"">&#39;records_skipped&#39;</span>: <span class=""m"">0</span>,
                          <span class=""s1"">&#39;total_count&#39;</span>: <span class=""m"">1</span><span class=""o"">}</span>,
              <span class=""s1"">&#39;search&#39;</span>: <span class=""o"">[{</span><span class=""s1"">&#39;_links&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;logs&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/v3/actors/joBjeDkWyBwLx/logs&#39;</span>,
                                  <span class=""s1"">&#39;owner&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/profiles/v3/testuser&#39;</span>,
                                  <span class=""s1"">&#39;self&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/v3/actors/joBjeDkWyBwLx/executions/1JKkQwX75vE56&#39;</span><span class=""o"">}</span>,
                          <span class=""s1"">&#39;actor_id&#39;</span>: <span class=""s1"">&#39;joBjeDkWyBwLx&#39;</span>,
                          <span class=""s1"">&#39;cpu&#39;</span>: <span class=""m"">444097006</span>,
                          <span class=""s1"">&#39;executor&#39;</span>: <span class=""s1"">&#39;testuser&#39;</span>,
                          <span class=""s1"">&#39;exitCode&#39;</span>: <span class=""m"">0</span>,
                          <span class=""s1"">&#39;final_state&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;Dead&#39;</span>: False,
                                      <span class=""s1"">&#39;Error&#39;</span>: <span class=""s1"">&#39;&#39;</span>,
                                      <span class=""s1"">&#39;ExitCode&#39;</span>: <span class=""m"">0</span>,
                                      <span class=""s1"">&#39;FinishedAt&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:21.385Z&#39;</span>,
                                      <span class=""s1"">&#39;OOMKilled&#39;</span>: False,
                                      <span class=""s1"">&#39;Paused&#39;</span>: False,
                                      <span class=""s1"">&#39;Pid&#39;</span>: <span class=""m"">0</span>,
                                      <span class=""s1"">&#39;Restarting&#39;</span>: False,
                                      <span class=""s1"">&#39;Running&#39;</span>: False,
                                      <span class=""s1"">&#39;StartedAt&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:19.382Z&#39;</span>,
                                      <span class=""s1"">&#39;Status&#39;</span>: <span class=""s1"">&#39;exited&#39;</span><span class=""o"">}</span>,
                          <span class=""s1"">&#39;id&#39;</span>: <span class=""s1"">&#39;1JKkQwX75vE56&#39;</span>,
                          <span class=""s1"">&#39;io&#39;</span>: <span class=""m"">716</span>,
                          <span class=""s1"">&#39;message_received_time&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:18.7Z00&#39;</span>,
                          <span class=""s1"">&#39;runtime&#39;</span>: <span class=""m"">2</span>,
                          <span class=""s1"">&#39;start_time&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:18.954Z&#39;</span>,
                          <span class=""s1"">&#39;status&#39;</span>: <span class=""s1"">&#39;COMPLETE&#39;</span>,
                          <span class=""s1"">&#39;worker_id&#39;</span>: <span class=""s1"">&#39;7kvAAKYKB6Qk6&#39;</span><span class=""o"">}]}</span>,
  <span class=""s1"">&#39;status&#39;</span>: <span class=""s1"">&#39;success&#39;</span>,
  <span class=""s1"">&#39;version&#39;</span>: <span class=""s1"">&#39;:dev&#39;</span><span class=""o"">}</span>
 </pre></div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""inputs"">
 <h3>Inputs<a class=""headerlink"" href=""#inputs"" title=""Permalink to this headline"">¶</a></h3>
 <p>All inputs are given to the search function as query parameters and thus are converted
 to strings. It is then up to Abaco’s side to convert these inputs back to the intended
 formats. Strings are left untouched. Booleans are expected to be “False” or “false” and
 “True” or “true” to be converted. Numbers are converted all to floats, these are still
 comparable to database instances of int, so there should be no issue. Lists are parsed
 with <code class=""docutils literal notranslate""><span class=""pre"">json.loads</span></code> and will accept either <code class=""docutils literal notranslate""><span class=""pre"">[&quot;test&quot;]</span></code> or <code class=""docutils literal notranslate""><span class=""pre"">['test']</span></code> with post-processing
 on Abaco’s end to convert to lists.</p>
 <p>The last consumed input type is datetime objects. Abaco accepts a broad range of ISO 8601
 like strings. An example of the most detailed string accepted is <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T20:15:52:246252-06:00</span></code>.
 <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T20:15:52:246Z</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T20:15:52-06:00</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T20:15-06:00</span></code>,
 <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T20-06:00</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29-06:00</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">2020-04Z</span></code>, and <code class=""docutils literal notranslate""><span class=""pre"">2020</span></code> are also acceptable.</p>
 <div class=""admonition attention"">
 <p class=""first admonition-title"">Attention</p>
 <p class=""last"">Abaco stores all times in UTC, so addition of your timezone or conversion to UTC is
 important. If no timezone information is given (<code class=""docutils literal notranslate""><span class=""pre"">-06:00</span></code> or <code class=""docutils literal notranslate""><span class=""pre"">Z</span></code> (to signal UTC))
 the datetime is assumed to be in UTC.</p>
 </div>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">Comparison with datetime rounds to the minimum time possible. For instance if you want
 to see if 2020-12-30 is greater than 2020, you would receive True as 2020 is rounded
 to <cite>2020-01-01T00:00:00Z</cite>. This holds true until you reach millisecond accurate time.</p>
 </div>
 <div class=""section"" id=""creating-iso-8601-formatted-strings"">
"
29,39,Introduction to Abaco - Database Search - Inputs - Creating ISO 8601 formatted strings - Python - UTC String. Python - String with Timezone The following gets the current time as an ISO 8601 formatted string with timezone:. This prints 2020-04-29T16:21:34.602078-05:00..  Python - UTC String The following gets the current UTC time as an ISO 8601 formatted string:. This prints 2020-04-29T21:21:34.602078. Feel free to add the Z or leave it absent.,"<h5>Python - String with Timezone<a class=""headerlink"" href=""#python-string-with-timezone"" title=""Permalink to this headline"">¶</a></h5>
 <p>The following gets the current time as an ISO 8601 formatted string with timezone:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">import</span> <span class=""nn"">datetime</span>
 <span class=""kn"">import</span> <span class=""nn"">pytz</span>
 
 <span class=""n"">austin_time_zone</span> <span class=""o"">=</span> <span class=""n"">pytz</span><span class=""o"">.</span><span class=""n"">timezone</span><span class=""p"">(</span><span class=""s2"">&quot;America/Chicago&quot;</span><span class=""p"">)</span>
 <span class=""n"">isoString</span> <span class=""o"">=</span> <span class=""n"">datetime</span><span class=""o"">.</span><span class=""n"">datetime</span><span class=""o"">.</span><span class=""n"">now</span><span class=""p"">(</span><span class=""n"">tz</span><span class=""o"">=</span><span class=""n"">austin_time_zone</span><span class=""p"">)</span><span class=""o"">.</span><span class=""n"">isoformat</span><span class=""p"">()</span>
 <span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">isoString</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>This prints <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T16:21:34.602078-05:00</span></code>.</p>
 </div>
 <div class=""section"" id=""python-utc-string"">
 <h5>Python - UTC String<a class=""headerlink"" href=""#python-utc-string"" title=""Permalink to this headline"">¶</a></h5>
 <p>The following gets the current UTC time as an ISO 8601 formatted string:</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">import</span> <span class=""nn"">datetime</span>
 
 <span class=""n"">isoString</span> <span class=""o"">=</span> <span class=""n"">datetime</span><span class=""o"">.</span><span class=""n"">datetime</span><span class=""o"">.</span><span class=""n"">utcnow</span><span class=""p"">()</span><span class=""o"">.</span><span class=""n"">isoformat</span><span class=""p"">()</span>
 <span class=""nb"">print</span><span class=""p"">(</span><span class=""n"">isoString</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>This prints <code class=""docutils literal notranslate""><span class=""pre"">2020-04-29T21:21:34.602078</span></code>. Feel free to add the Z or leave it absent.</p>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""searching"">
"
30,40,"Introduction to Abaco - Database Search - Searching. Searching Like mentioned above, a search may contain as many parameters as a user wants sans for  limit and skip, where each may only be used once. Search on the new  {base}/actors/search/{database} always takes place and when given no parameters returns  any information the user has access to. To activate on search on the other endpoints, at  least one query parameter must be declared.. Important x-nonce queries will still work as expected and do not need any modification.","<h3>Searching<a class=""headerlink"" href=""#searching"" title=""Permalink to this headline"">¶</a></h3>
 <p>Like mentioned above, a search may contain as many parameters as a user wants sans for
 <code class=""docutils literal notranslate""><span class=""pre"">limit</span></code> and <code class=""docutils literal notranslate""><span class=""pre"">skip</span></code>, where each may only be used once. Search on the new
 <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/search/{database}</span></code> always takes place and when given no parameters returns
 any information the user has access to. To activate on search on the other endpoints, at
 least one query parameter must be declared.</p>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last""><code class=""docutils literal notranslate""><span class=""pre"">x-nonce</span></code> queries will still work as expected and do not need any modification.</p>
 </div>
 <div class=""section"" id=""performing-searches-on-different-endpoints"">
"
31,42,"Introduction to Abaco - Database Search - Searching - Performing searches on different endpoints - Result. {base}/actors/search/actors You can use actors, workers, executions, or logs as database inputs  for the endpoints. Each queries the specified database..  cURL $ curl -H ""X-Tapis-Token: $TOKEN"" \  https://tacc.tapis.io/v3/actors/search/actors?image=abacosamples/test&create_time.gt=2020-04-29&status.in=[""READY"", ""BUSY""]  . . Result. . {base}/actors/joBjeDkWyBwLx/executions For a search from an endpoint like this the actor_id will already be in the query,  so for this example you would only receive executions with the actor_id of joBjeDkWyBwLx.  {base}/actors/joBjeDkWyBwLx/workers would result in the same behaviour, but for workers.  This usage means that performing a search on {base}/actors/joBjeDkWyBwLx/executions/1JKkQwX75vE56/logs  would always result in one result. Only search on the {base}/actors thus is the only full  search available that does not use the {base}/actors/search/{database} endpoint.. Attention Use the {base}/actors/search/{database} endpoint for a full search of the specified  database.. . cURL $ curl -H ""X-Tapis-Token: $TOKEN"" \  https://tacc.tapis.io/v3/actors/search/actors/joBjeDkWyBwLx/executions?status=COMPLETE&start_time.gt=2019  . . Result","<h5>{base}/actors/search/actors<a class=""headerlink"" href=""#base-actors-search-actors"" title=""Permalink to this headline"">¶</a></h5>
 <p>You can use <code class=""docutils literal notranslate""><span class=""pre"">actors</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">workers</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">executions</span></code>, or <code class=""docutils literal notranslate""><span class=""pre"">logs</span></code> as database inputs
 for the endpoints. Each queries the specified database.</p>
 </div>
 <div class=""section"" id=""id20"">
 <h5>cURL<a class=""headerlink"" href=""#id20"" title=""Permalink to this headline"">¶</a></h5>
 <div class=""highlight-cURL notranslate""><div class=""highlight""><pre><span></span>$ curl -H &quot;X-Tapis-Token: $TOKEN&quot; \
 https://tacc.tapis.io/v3/actors/search/actors?image=abacosamples/test&amp;create_time.gt=2020-04-29&amp;status.in=[&quot;READY&quot;, &quot;BUSY&quot;]
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""result"">
 <h5>Result<a class=""headerlink"" href=""#result"" title=""Permalink to this headline"">¶</a></h5>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span><span class=""s1"">&#39;message&#39;</span>: <span class=""s1"">&#39;Search completed successfully.&#39;</span>,
 <span class=""s1"">&#39;result&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;_metadata&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;count_returned&#39;</span>: <span class=""m"">1</span>,
                         <span class=""s1"">&#39;record_limit&#39;</span>: <span class=""m"">10</span>,
                         <span class=""s1"">&#39;records_skipped&#39;</span>: <span class=""m"">0</span>,
                         <span class=""s1"">&#39;total_count&#39;</span>: <span class=""m"">1</span><span class=""o"">}</span>,
             <span class=""s1"">&#39;search&#39;</span>: <span class=""o"">[{</span><span class=""s1"">&#39;_links&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;executions&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/v3/actors/joBjeDkWyBwLx/executions&#39;</span>,
                                 <span class=""s1"">&#39;owner&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/profiles/v3/testuser&#39;</span>,
                                 <span class=""s1"">&#39;self&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/v3/actors/joBjeDkWyBwLx&#39;</span><span class=""o"">}</span>,
                         <span class=""s1"">&#39;createTime&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:46:53.393Z&#39;</span>,
                         <span class=""s1"">&#39;default_environment&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;default_env_key1&#39;</span>: <span class=""s1"">&#39;default_env_value1&#39;</span>,
                                             <span class=""s1"">&#39;default_env_key2&#39;</span>: <span class=""s1"">&#39;default_env_value2&#39;</span><span class=""o"">}</span>,
                         <span class=""s1"">&#39;description&#39;</span>: <span class=""s1"">&#39;&#39;</span>,
                         <span class=""s1"">&#39;gid&#39;</span>: None,
                         <span class=""s1"">&#39;hints&#39;</span>: <span class=""o"">[]</span>,
                         <span class=""s1"">&#39;id&#39;</span>: <span class=""s1"">&#39;joBjeDkWyBwLx&#39;</span>,
                         <span class=""s1"">&#39;image&#39;</span>: <span class=""s1"">&#39;abacosamples/test&#39;</span>,
                         <span class=""s1"">&#39;last_update_time&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:46:53.393Z&#39;</span>,
                         <span class=""s1"">&#39;link&#39;</span>: <span class=""s1"">&#39;&#39;</span>,
                         <span class=""s1"">&#39;max_cpus&#39;</span>: None,
                         <span class=""s1"">&#39;max_workers&#39;</span>: None,
                         <span class=""s1"">&#39;mem_limit&#39;</span>: None,
                         <span class=""s1"">&#39;mounts&#39;</span>: <span class=""o"">[{</span><span class=""s1"">&#39;container_path&#39;</span>: <span class=""s1"">&#39;/_abaco_data1&#39;</span>,
                                     <span class=""s1"">&#39;host_path&#39;</span>: <span class=""s1"">&#39;/data1&#39;</span>,
                                     <span class=""s1"">&#39;mode&#39;</span>: <span class=""s1"">&#39;ro&#39;</span><span class=""o"">}]</span>,
                         <span class=""s1"">&#39;name&#39;</span>: <span class=""s1"">&#39;abaco_test_suite_default_env&#39;</span>,
                         <span class=""s1"">&#39;owner&#39;</span>: <span class=""s1"">&#39;testuser&#39;</span>,
                         <span class=""s1"">&#39;privileged&#39;</span>: False,
                         <span class=""s1"">&#39;queue&#39;</span>: <span class=""s1"">&#39;default&#39;</span>,
                         <span class=""s1"">&#39;state&#39;</span>: <span class=""o"">{}</span>,
                         <span class=""s1"">&#39;stateless&#39;</span>: True,
                         <span class=""s1"">&#39;status&#39;</span>: <span class=""s1"">&#39;READY&#39;</span>,
                         <span class=""s1"">&#39;status_message&#39;</span>: <span class=""s1"">&#39; &#39;</span>,
                         <span class=""s1"">&#39;tasdir&#39;</span>: None,
                         <span class=""s1"">&#39;token&#39;</span>: <span class=""s1"">&#39;false&#39;</span>,
                         <span class=""s1"">&#39;type&#39;</span>: <span class=""s1"">&#39;none&#39;</span>,
                         <span class=""s1"">&#39;uid&#39;</span>: None,
                         <span class=""s1"">&#39;use_container_uid&#39;</span>: False,
                         <span class=""s1"">&#39;webhook&#39;</span>: <span class=""s1"">&#39;&#39;</span><span class=""o"">}]}</span>,
 <span class=""s1"">&#39;status&#39;</span>: <span class=""s1"">&#39;success&#39;</span>,
 <span class=""s1"">&#39;version&#39;</span>: <span class=""s1"">&#39;:dev&#39;</span><span class=""o"">}</span>
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""base-actors-jobjedkwybwlx-executions"">
 <h5>{base}/actors/joBjeDkWyBwLx/executions<a class=""headerlink"" href=""#base-actors-jobjedkwybwlx-executions"" title=""Permalink to this headline"">¶</a></h5>
 <p>For a search from an endpoint like this the actor_id will already be in the query,
 so for this example you would only receive executions with the actor_id of <code class=""docutils literal notranslate""><span class=""pre"">joBjeDkWyBwLx</span></code>.
 <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/joBjeDkWyBwLx/workers</span></code> would result in the same behaviour, but for workers.
 This usage means that performing a search on <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/joBjeDkWyBwLx/executions/1JKkQwX75vE56/logs</span></code>
 would always result in one result. Only search on the <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors</span></code> thus is the only full
 search available that does not use the <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/search/{database}</span></code> endpoint.</p>
 <div class=""admonition attention"">
 <p class=""first admonition-title"">Attention</p>
 <p class=""last"">Use the <code class=""docutils literal notranslate""><span class=""pre"">{base}/actors/search/{database}</span></code> endpoint for a full search of the specified
 database.</p>
 </div>
 </div>
 <div class=""section"" id=""id21"">
 <h5>cURL<a class=""headerlink"" href=""#id21"" title=""Permalink to this headline"">¶</a></h5>
 <div class=""highlight-cURL notranslate""><div class=""highlight""><pre><span></span>$ curl -H &quot;X-Tapis-Token: $TOKEN&quot; \
 https://tacc.tapis.io/v3/actors/search/actors/joBjeDkWyBwLx/executions?status=COMPLETE&amp;start_time.gt=2019
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id22"">
 <h5>Result<a class=""headerlink"" href=""#id22"" title=""Permalink to this headline"">¶</a></h5>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span><span class=""s1"">&#39;message&#39;</span>: <span class=""s1"">&#39;Executions search completed successfully.&#39;</span>,
  <span class=""s1"">&#39;result&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;_metadata&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;count_returned&#39;</span>: <span class=""m"">1</span>,
                          <span class=""s1"">&#39;record_limit&#39;</span>: <span class=""m"">10</span>,
                          <span class=""s1"">&#39;records_skipped&#39;</span>: <span class=""m"">0</span>,
                          <span class=""s1"">&#39;total_count&#39;</span>: <span class=""m"">1</span><span class=""o"">}</span>,
              <span class=""s1"">&#39;search&#39;</span>: <span class=""o"">[{</span><span class=""s1"">&#39;_links&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;logs&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/v3/actors/joBjeDkWyBwLx/logs&#39;</span>,
                                  <span class=""s1"">&#39;owner&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/profiles/v3/testuser&#39;</span>,
                                  <span class=""s1"">&#39;self&#39;</span>: <span class=""s1"">&#39;https://dev.tenants.aloedev.tacc.cloud/v3/actors/joBjeDkWyBwLx/executions/1JKkQwX75vE56&#39;</span><span class=""o"">}</span>,
                          <span class=""s1"">&#39;actor_id&#39;</span>: <span class=""s1"">&#39;joBjeDkWyBwLx&#39;</span>,
                          <span class=""s1"">&#39;cpu&#39;</span>: <span class=""m"">444097006</span>,
                          <span class=""s1"">&#39;executor&#39;</span>: <span class=""s1"">&#39;testuser&#39;</span>,
                          <span class=""s1"">&#39;exitCode&#39;</span>: <span class=""m"">0</span>,
                          <span class=""s1"">&#39;final_state&#39;</span>: <span class=""o"">{</span><span class=""s1"">&#39;Dead&#39;</span>: False,
                                      <span class=""s1"">&#39;Error&#39;</span>: <span class=""s1"">&#39;&#39;</span>,
                                      <span class=""s1"">&#39;ExitCode&#39;</span>: <span class=""m"">0</span>,
                                      <span class=""s1"">&#39;FinishedAt&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:21.385Z&#39;</span>,
                                      <span class=""s1"">&#39;OOMKilled&#39;</span>: False,
                                      <span class=""s1"">&#39;Paused&#39;</span>: False,
                                      <span class=""s1"">&#39;Pid&#39;</span>: <span class=""m"">0</span>,
                                      <span class=""s1"">&#39;Restarting&#39;</span>: False,
                                      <span class=""s1"">&#39;Running&#39;</span>: False,
                                      <span class=""s1"">&#39;StartedAt&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:19.382Z&#39;</span>,
                                      <span class=""s1"">&#39;Status&#39;</span>: <span class=""s1"">&#39;exited&#39;</span><span class=""o"">}</span>,
                          <span class=""s1"">&#39;id&#39;</span>: <span class=""s1"">&#39;1JKkQwX75vE56&#39;</span>,
                          <span class=""s1"">&#39;io&#39;</span>: <span class=""m"">716</span>,
                          <span class=""s1"">&#39;message_received_time&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:18.7Z00&#39;</span>,
                          <span class=""s1"">&#39;runtime&#39;</span>: <span class=""m"">2</span>,
                          <span class=""s1"">&#39;start_time&#39;</span>: <span class=""s1"">&#39;2020-04-29T21:47:18.954Z&#39;</span>,
                          <span class=""s1"">&#39;status&#39;</span>: <span class=""s1"">&#39;COMPLETE&#39;</span>,
                          <span class=""s1"">&#39;worker_id&#39;</span>: <span class=""s1"">&#39;7kvAAKYKB6Qk6&#39;</span><span class=""o"">}]}</span>,
  <span class=""s1"">&#39;status&#39;</span>: <span class=""s1"">&#39;success&#39;</span>,
  <span class=""s1"">&#39;version&#39;</span>: <span class=""s1"">&#39;:dev&#39;</span><span class=""o"">}</span>
 </pre></div>
 </div>
 </div>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""actor-state"">
"
32,43,Introduction to Abaco - Actor State. Actor State In this section we describe the state that can persist through Abaco actor container executions.,"<h2>Actor State<a class=""headerlink"" href=""#actor-state"" title=""Permalink to this headline"">¶</a></h2>
 <p>In this section we describe the state that can persist through Abaco actor container executions.</p>
 <div class=""section"" id=""state"">
"
33,44,"Introduction to Abaco - Actor State - Examples. State When an actor is registered, its stateless property is automatically set to true. An actor must be registered with stateless=false to be stateful (maintain state ass executions). Once an actor is executed, the associated worker GETs data from the /v3/actors/{actor_id}/state endpoint and injects it into the actor’s _abaco_actor_state environment variable. While an actor is executing, the actor can update its state by POSTing to the aforementioned endpoint.. The worker only GETs data from the state endpoint one time as the actor is initiated. If the actor updates its state endpoint during execution, the worker does not inject the new state until a new execution. Stateful actors may only have one associated worker in order to avoid race conditions. Thus generally, stateless actors will execute quicker as they can operate in parallel. Issuing a state to a stateless actor will return a actor is stateless. error. The state variable must be JSON-serializable. An example of passing JSON-serializable data can be found under Examples below.. . Utilizing State in Actors to Accomplish Something WIP.  Examples","<h3>State<a class=""headerlink"" href=""#state"" title=""Permalink to this headline"">¶</a></h3>
 <p>When an actor is registered, its <code class=""docutils literal notranslate""><span class=""pre"">stateless</span></code> property is automatically set to <code class=""docutils literal notranslate""><span class=""pre"">true</span></code>. An actor must be registered with <code class=""docutils literal notranslate""><span class=""pre"">stateless=false</span></code> to be stateful (maintain state ass executions).</p>
 <p>Once an actor is executed, the associated worker <code class=""docutils literal notranslate""><span class=""pre"">GETs</span></code> data from the <code class=""docutils literal notranslate""><span class=""pre"">/v3/actors/{actor_id}/state</span></code> endpoint and injects it into the actor’s <code class=""docutils literal notranslate""><span class=""pre"">_abaco_actor_state</span></code> environment variable. While an actor is executing, the actor can update its state by <code class=""docutils literal notranslate""><span class=""pre"">POSTing</span></code> to the aforementioned endpoint.</p>
 <ul class=""simple"">
 <li>The worker only <code class=""docutils literal notranslate""><span class=""pre"">GETs</span></code> data from the state endpoint one time as the actor is initiated. If the actor updates its state endpoint during execution, the worker does not inject the new state until a new execution.</li>
 <li>Stateful actors may only have one associated worker in order to avoid race conditions. Thus generally, stateless actors will execute quicker as they can operate in parallel.</li>
 <li>Issuing a state to a stateless actor will return a <code class=""docutils literal notranslate""><span class=""pre"">actor</span> <span class=""pre"">is</span> <span class=""pre"">stateless.</span></code> error.</li>
 <li>The <code class=""docutils literal notranslate""><span class=""pre"">state</span></code> variable must be JSON-serializable. An example of passing JSON-serializable data can be found under <a class=""reference internal"" href=""#examples"">Examples</a> below.</li>
 </ul>
 </div>
 <div class=""section"" id=""utilizing-state-in-actors-to-accomplish-something"">
 <h3>Utilizing State in Actors to Accomplish Something<a class=""headerlink"" href=""#utilizing-state-in-actors-to-accomplish-something"" title=""Permalink to this headline"">¶</a></h3>
 <p><strong>WIP</strong></p>
 </div>
 <div class=""section"" id=""examples"">
 <h3>Examples<a class=""headerlink"" href=""#examples"" title=""Permalink to this headline"">¶</a></h3>
 <div class=""section"" id=""id23"">
"
34,45,Introduction to Abaco - Actor State - Examples - Python. curl Here are some examples interacting with state using curl. Registering an actor specifying statefulness: stateless=false.. POSTing a state to a particular actor; keep in mind we must indicate in the header that we are passing content type application/json.. GETting information about a particular actor’s state.. . Python Here are some examples interacting with state using Python. The tapipy.actors module provides access to an actor’s environment data in native Python objects. Registering an actor specifying statefulness: stateless=false.. POSTing a state to a particular actor; again keep in mind we must pass in JSON serializable data.. GETting information about a particular actor’s state. This function returns a Python dictionary with many fields one of which is state.,"<h4>curl<a class=""headerlink"" href=""#id23"" title=""Permalink to this headline"">¶</a></h4>
 <p>Here are some examples interacting with state using curl.</p>
 <p>Registering an actor specifying statefulness: <code class=""docutils literal notranslate""><span class=""pre"">stateless=false</span></code>.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;image=abacosamples/test&amp;stateless=false&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors
 </pre></div>
 </div>
 <p>POSTing a state to a particular actor; keep in mind we must indicate in the header that we are passing content type <code class=""docutils literal notranslate""><span class=""pre"">application/json</span></code>.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -H <span class=""s2"">&quot;Content-Type: application/json&quot;</span> <span class=""se"">\</span>
 -d <span class=""s1"">&#39;{&quot;some variable&quot;: &quot;value&quot;, &quot;another variable&quot;: &quot;value2&quot;}&#39;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/state
 </pre></div>
 </div>
 <p>GETting information about a particular actor’s state.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/state
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""id24"">
 <h4>Python<a class=""headerlink"" href=""#id24"" title=""Permalink to this headline"">¶</a></h4>
 <p>Here are some examples interacting with state using Python. The <code class=""docutils literal notranslate""><span class=""pre"">tapipy.actors</span></code> module provides access to an actor’s environment data in native Python objects.</p>
 <p>Registering an actor specifying statefulness: <code class=""docutils literal notranslate""><span class=""pre"">stateless=false</span></code>.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">from</span> <span class=""nn"">tapipy.tapis</span> <span class=""kn"">import</span> <span class=""n"">Tapis</span>
 <span class=""n"">t</span> <span class=""o"">=</span> <span class=""n"">Tapis</span><span class=""p"">(</span><span class=""n"">api_server</span><span class=""o"">=</span><span class=""s1"">&#39;https://tacc.tapis.io&#39;</span><span class=""p"">,</span> <span class=""n"">username</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;username&gt;&#39;</span><span class=""p"">,</span> <span class=""n"">password</span><span class=""o"">=</span><span class=""s1"">&#39;&lt;password&gt;&#39;</span><span class=""p"">)</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">get_tokens</span><span class=""p"">()</span>
 <span class=""n"">actor</span> <span class=""o"">=</span> <span class=""p"">{</span><span class=""s2"">&quot;image&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;abacosamples/test&quot;</span><span class=""p"">,</span>
          <span class=""s2"">&quot;stateless&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;False&quot;</span><span class=""p"">}</span>
 <span class=""n"">actor_res</span> <span class=""o"">=</span> <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">create_actor</span><span class=""p"">(</span><span class=""o"">**</span><span class=""n"">actor</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>POSTing a state to a particular actor; again keep in mind we must pass in JSON serializable data.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""n"">state</span> <span class=""o"">=</span> <span class=""p"">{</span><span class=""s2"">&quot;some variable&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;value&quot;</span><span class=""p"">,</span> <span class=""s2"">&quot;another variable&quot;</span><span class=""p"">:</span> <span class=""s2"">&quot;value2&quot;</span><span class=""p"">}</span>
 <span class=""n"">t</span><span class=""o"">.</span><span class=""n"">actors</span><span class=""o"">.</span><span class=""n"">update_state</span><span class=""p"">(</span><span class=""n"">actor_id</span> <span class=""o"">=</span> <span class=""n"">actor_res</span><span class=""o"">.</span><span class=""n"">id</span><span class=""p"">,</span>
                       <span class=""n"">request_body</span> <span class=""o"">=</span> <span class=""n"">state</span><span class=""p"">)</span>
 </pre></div>
 </div>
 <p>GETting information about a particular actor’s state. This function returns a Python dictionary with many fields one of which is state.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span><span class=""kn"">from</span> <span class=""nn"">tapipy.actors</span> <span class=""kn"">import</span> <span class=""n"">get_context</span>
 <span class=""n"">get_context</span><span class=""p"">()</span>
 <span class=""p"">{</span><span class=""s1"">&#39;raw_message&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;content_type&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;execution_id&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;username&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;state&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;some_state&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;actor_dbid&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;actor_id&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;raw_message_parse_log&#39;</span><span class=""p"">:</span> <span class=""s1"">&#39;&lt;text&gt;&#39;</span><span class=""p"">,</span> <span class=""s1"">&#39;message_dict&#39;</span><span class=""p"">:</span> <span class=""p"">{}}</span>
 </pre></div>
 </div>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""actor-sharing-and-nonces"">
"
35,46,"Introduction to Abaco - Actor Sharing and Nonces. Actor Sharing and Nonces Abaco provides a basic permissions system for securing actors. An actor registered with Abaco starts out as private  and only accessible to the API user who registered it. This API user is referred to as the “owner” of the actor.  By making a POST request to the permissions endpoint for an actor, a user can manage the list of API users who have  access to the actor.","<h2>Actor Sharing and Nonces<a class=""headerlink"" href=""#actor-sharing-and-nonces"" title=""Permalink to this headline"">¶</a></h2>
 <p>Abaco provides a basic permissions system for securing actors. An actor registered with Abaco starts out as private
 and only accessible to the API user who registered it. This API user is referred to as the “owner” of the actor.
 By making a POST request to the permissions endpoint for an actor, a user can manage the list of API users who have
 access to the actor.</p>
 <div class=""section"" id=""permission-levels"">
"
36,47,"Introduction to Abaco - Actor Sharing and Nonces - Permission Levels. Permission Levels Abaco supports sharing an actor at three different permission levels; in increasing order, they are: READ,  EXECUTE and UPDATE. Higher permission imply lower permissions, so a user with EXECUTE also has READ while a  user with UPDATE has EXECUTE and READ. The permission levels provide the followig accesses:.  READ - ability to list the actor to see it’s details, list executions and retrieve execution logs. EXECUTE - ability to send an actor a message. UPDATE - ability to change the actor’s definition.","<h3>Permission Levels<a class=""headerlink"" href=""#permission-levels"" title=""Permalink to this headline"">¶</a></h3>
 <p>Abaco supports sharing an actor at three different permission levels; in increasing order, they are: <cite>READ</cite>,
 <cite>EXECUTE</cite> and <cite>UPDATE</cite>. Higher permission imply lower permissions, so a user with <cite>EXECUTE</cite> also has <cite>READ</cite> while a
 user with <cite>UPDATE</cite> has <cite>EXECUTE</cite> and <cite>READ</cite>. The permission levels provide the followig accesses:</p>
 <blockquote>
 <div><ul class=""simple"">
 <li><cite>READ</cite> - ability to list the actor to see it’s details, list executions and retrieve execution logs.</li>
 <li><cite>EXECUTE</cite> - ability to send an actor a message.</li>
 <li><cite>UPDATE</cite> - ability to change the actor’s definition.</li>
 </ul>
 </div></blockquote>
 <div class=""section"" id=""id25"">
"
37,48,"Introduction to Abaco - Actor Sharing and Nonces - Permission Levels - cURL. cURL To share an actor with another API user, make a POST request to the /permissions endpoint; the following example  uses curl to grant READ permission to API user jdoe.. Example response:. We can list all permissions associated with an actor at any time using a GET request:. Example response:.  Note To remove a user’s permission, POST to the permission endpoint and set level=NONE","<h4>cURL<a class=""headerlink"" href=""#id25"" title=""Permalink to this headline"">¶</a></h4>
 <p>To share an actor with another API user, make a POST request to the <cite>/permissions</cite> endpoint; the following example
 uses curl to grant READ permission to API user <cite>jdoe</cite>.</p>
 <div class=""highlight-python notranslate""><div class=""highlight""><pre><span></span>$ curl -H &quot;X-Tapis-Token: $TOKEN&quot; \
 -d &quot;user=jdoe&amp;level=READ&quot; \
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/permissions
 </pre></div>
 </div>
 <p>Example response:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span>
   <span class=""s2"">&quot;message&quot;</span>: <span class=""s2"">&quot;Permission added successfully.&quot;</span>,
   <span class=""s2"">&quot;result&quot;</span>: <span class=""o"">{</span>
     <span class=""s2"">&quot;jdoe&quot;</span>: <span class=""s2"">&quot;READ&quot;</span>,
     <span class=""s2"">&quot;testuser&quot;</span>: <span class=""s2"">&quot;UPDATE&quot;</span>
   <span class=""o"">}</span>,
   <span class=""s2"">&quot;status&quot;</span>: <span class=""s2"">&quot;success&quot;</span>,
   <span class=""s2"">&quot;version&quot;</span>: <span class=""s2"">&quot;1.0.0&quot;</span>
 <span class=""o"">}</span>
 </pre></div>
 </div>
 <p>We can list all permissions associated with an actor at any time using a GET request:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/permissions
 </pre></div>
 </div>
 <p>Example response:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span>
   <span class=""s2"">&quot;message&quot;</span>: <span class=""s2"">&quot;Permissions retrieved successfully.&quot;</span>,
   <span class=""s2"">&quot;result&quot;</span>: <span class=""o"">{</span>
     <span class=""s2"">&quot;jdoe&quot;</span>: <span class=""s2"">&quot;READ&quot;</span>,
     <span class=""s2"">&quot;jsmith&quot;</span>: <span class=""s2"">&quot;EXECUTE&quot;</span>,
     <span class=""s2"">&quot;testuser&quot;</span>: <span class=""s2"">&quot;UPDATE&quot;</span>
   <span class=""o"">}</span>,
   <span class=""s2"">&quot;status&quot;</span>: <span class=""s2"">&quot;success&quot;</span>,
   <span class=""s2"">&quot;version&quot;</span>: <span class=""s2"">&quot;1.0.0&quot;</span>
 <span class=""o"">}</span>
 </pre></div>
 </div>
 <div class=""admonition note"">
 <p class=""first admonition-title"">Note</p>
 <p class=""last"">To remove a user’s permission, POST to the permission endpoint and set <cite>level=NONE</cite></p>
 </div>
 </div>
 </div>
 <div class=""section"" id=""public-actors"">
"
38,49,"Introduction to Abaco - Actor Sharing and Nonces - Nonces. Public Actors At times, it can be useful to grant all API users access to an actor. To enable this, Abaco recognizes the special  ABACO_WORLD user. Granting a permission to the ABACO_WORLD user will effectively grant the permission to all API users..  cURL The following grants READ permission to all API users:. . Nonces Abaco provides a capability referred to as actor nonces to ease integration with third-party systems leveraging  different authentication mechanisms. An actor nonce can be used in place of the typical TACC API access token  (bearer token). However, unlike an access token which can be used for any actor the user has access, a nonce can only be  used for a specific actor.","<h3>Public Actors<a class=""headerlink"" href=""#public-actors"" title=""Permalink to this headline"">¶</a></h3>
 <p>At times, it can be useful to grant <strong>all</strong> API users access to an actor. To enable this, Abaco recognizes the special
 ABACO_WORLD user. Granting a permission to the ABACO_WORLD user will effectively grant the permission to all API users.</p>
 </div>
 <div class=""section"" id=""id26"">
 <h3>cURL<a class=""headerlink"" href=""#id26"" title=""Permalink to this headline"">¶</a></h3>
 <p>The following grants <cite>READ</cite> permission to all API users:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;user=ABACO_WORLD&amp;level=READ&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/permissions
 </pre></div>
 </div>
 </div>
 <div class=""section"" id=""nonces"">
 <h3>Nonces<a class=""headerlink"" href=""#nonces"" title=""Permalink to this headline"">¶</a></h3>
 <p>Abaco provides a capability referred to as actor <em>nonces</em> to ease integration with third-party systems leveraging
 different authentication mechanisms. An actor <cite>nonce</cite> can be used in place of the typical TACC API access token
 (bearer token). However, unlike an access token which can be used for any actor the user has access, a nonce can only be
 used for a specific actor.</p>
 <div class=""section"" id=""creating-nonces"">
"
39,50,"Introduction to Abaco - Actor Sharing and Nonces - Nonces - Redeeming Nonces. Creating Nonces API users create nonces using the nonces endpoint associated with an actor. Nonces can be limited to a specific  permission level (e.g., READ only), and can have a finite number of uses or an unlimited number. The following example uses curl to create a nonce with READ level permission and with 5 uses.. A typical response:. The id of the nonce (in the above example, TACC_qBMrvO6Zy0yQz) can be used to access the actor in place of the  access token.. Note Roles are used throughout the TACC API’s to grant users with specific privileges (e.g., administrative access to certain  APIs). The roles of the API user generating the nonce are captured at the time the nonce is created; when using a nonce,  a request will have permissions granted via those roles. Most users will not need to worry about TACC API roles.. To create a nonce with unlimited uses, set maxUses=-1..  Redeeming Nonces To use a nonce in place of an access token, simply form the request as normal and add the query paramter x-nonce=<nonce_id>. For example. The response will be exactly the same as if issuing the request with an access token.","<h4>Creating Nonces<a class=""headerlink"" href=""#creating-nonces"" title=""Permalink to this headline"">¶</a></h4>
 <p>API users create nonces using the nonces endpoint associated with an actor. Nonces can be limited to a specific
 permission level (e.g., <cite>READ</cite> only), and can have a finite number of uses or an unlimited number.</p>
 <p>The following example uses curl to create a nonce with <cite>READ</cite> level permission and with 5 uses.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;maxUses=5&amp;level=READ&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/nonces
 </pre></div>
 </div>
 <p>A typical response:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span>
   <span class=""s2"">&quot;message&quot;</span>: <span class=""s2"">&quot;Actor nonce created successfully.&quot;</span>,
   <span class=""s2"">&quot;result&quot;</span>: <span class=""o"">{</span>
     <span class=""s2"">&quot;_links&quot;</span>: <span class=""o"">{</span>
       <span class=""s2"">&quot;actor&quot;</span>: <span class=""s2"">&quot;https://tacc.tapis.io/v3/actors/rNjQG5BBJoxO1&quot;</span>,
       <span class=""s2"">&quot;owner&quot;</span>: <span class=""s2"">&quot;https://tacc.tapis.io/profiles/v3/testuser&quot;</span>,
       <span class=""s2"">&quot;self&quot;</span>: <span class=""s2"">&quot;https://tacc.tapis.io/v3/actors/rNjQG5BBJoxO1/nonces/DEV_qBMrvO6Zy0yQz&quot;</span>
     <span class=""o"">}</span>,
     <span class=""s2"">&quot;actor_id&quot;</span>: <span class=""s2"">&quot;rNjQG5BBJoxO1&quot;</span>,
     <span class=""s2"">&quot;api_server&quot;</span>: <span class=""s2"">&quot;http://172.17.0.1:8000&quot;</span>,
     <span class=""s2"">&quot;createTime&quot;</span>: <span class=""s2"">&quot;2019-06-18 12:20:53.087704&quot;</span>,
     <span class=""s2"">&quot;currentUses&quot;</span>: <span class=""m"">0</span>,
     <span class=""s2"">&quot;description&quot;</span>: <span class=""s2"">&quot;&quot;</span>,
     <span class=""s2"">&quot;id&quot;</span>: <span class=""s2"">&quot;TACC_qBMrvO6Zy0yQz&quot;</span>,
     <span class=""s2"">&quot;lastUseTime&quot;</span>: <span class=""s2"">&quot;None&quot;</span>,
     <span class=""s2"">&quot;level&quot;</span>: <span class=""s2"">&quot;READ&quot;</span>,
     <span class=""s2"">&quot;maxUses&quot;</span>: <span class=""m"">5</span>,
     <span class=""s2"">&quot;owner&quot;</span>: <span class=""s2"">&quot;testuser&quot;</span>,
     <span class=""s2"">&quot;remainingUses&quot;</span>: <span class=""m"">5</span>,
   <span class=""o"">}</span>,
   <span class=""s2"">&quot;status&quot;</span>: <span class=""s2"">&quot;success&quot;</span>,
   <span class=""s2"">&quot;version&quot;</span>: <span class=""s2"">&quot;1.0.0&quot;</span>
 <span class=""o"">}</span>
 </pre></div>
 </div>
 <p>The <cite>id</cite> of the nonce (in the above example, <cite>TACC_qBMrvO6Zy0yQz</cite>) can be used to access the actor in place of the
 access token.</p>
 <div class=""admonition note"">
 <p class=""first admonition-title"">Note</p>
 <p class=""last"">Roles are used throughout the TACC API’s to grant users with specific privileges (e.g., administrative access to certain
 APIs). The roles of the API user generating the nonce are captured at the time the nonce is created; when using a nonce,
 a request will have permissions granted via those roles. Most users will not need to worry about TACC API roles.</p>
 </div>
 <p>To create a nonce with unlimited uses, set <cite>maxUses=-1</cite>.</p>
 </div>
 <div class=""section"" id=""redeeming-nonces"">
 <h4>Redeeming Nonces<a class=""headerlink"" href=""#redeeming-nonces"" title=""Permalink to this headline"">¶</a></h4>
 <p>To use a nonce in place of an access token, simply form the request as normal and add the query paramter <cite>x-nonce=&lt;nonce_id&gt;</cite>.</p>
 <p>For example</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -X POST -d <span class=""s2"">&quot;message=&lt;your content here&gt;&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/&lt;actor_id&gt;/messages?x-nonce<span class=""o"">=</span>TACC_vr9rMO6Zy0yHz
 </pre></div>
 </div>
 <p>The response will be exactly the same as if issuing the request with an access token.</p>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""networks-of-actors"">
"
40,51,"Introduction to Abaco - Networks of Actors. Networks of Actors Working with individual, isolated actors can augment an existing application with a lot of additional functionality, but the  full power of Abaco’s actor-based system is realized when many actors coordinate together to solve a common problem.  Actor coordination introduces new challenges that the system designer must address, and Abaco provides  features specifically designed to address these challenges.","<h2>Networks of Actors<a class=""headerlink"" href=""#networks-of-actors"" title=""Permalink to this headline"">¶</a></h2>
 <p>Working with individual, isolated actors can augment an existing application with a lot of additional functionality, but the
 full power of Abaco’s actor-based system is realized when many actors coordinate together to solve a common problem.
 Actor coordination introduces new challenges that the system designer must address, and Abaco provides
 features specifically designed to address these challenges.</p>
 <div class=""section"" id=""actor-aliases"">
"
41,52,"Introduction to Abaco - Networks of Actors - Actor Aliases. Actor Aliases An alias is a user-defined name for an actor that is managed independently of the actor itself. Put simply, an alias  maps a name to an actor id, and Abaco will replace a reference to an alias in any request with the actor id defined by  the alias at the time. Aliases are useful for insulating an actor from changes to another actor to which it will  send messages. For example, if actor A sends messages to actor B, the user can create an alias for actor B and configure A to send  messages to that alias. In the future, if changes need to be made to actor B or if messages from actor A need to be  routed to a different actor, the alias value can be updated without any code changes needed on the part of actor A. Creating and managing aliases is done via the /aliases collection.","<h3>Actor Aliases<a class=""headerlink"" href=""#actor-aliases"" title=""Permalink to this headline"">¶</a></h3>
 <p>An <cite>alias</cite> is a user-defined name for an actor that is managed independently of the actor itself. Put simply, an alias
 maps a name to an actor id, and Abaco will replace a reference to an alias in any request with the actor id defined by
 the alias at the time. Aliases are useful for insulating an actor from changes to another actor to which it will
 send messages.</p>
 <p>For example, if actor A sends messages to actor B, the user can create an alias for actor B and configure A to send
 messages to that alias. In the future, if changes need to be made to actor B or if messages from actor A need to be
 routed to a different actor, the alias value can be updated without any code changes needed on the part of actor A.</p>
 <p>Creating and managing aliases is done via the <code class=""docutils literal notranslate""><span class=""pre"">/aliases</span></code> collection.</p>
 <div class=""section"" id=""id27"">
"
42,53,"Introduction to Abaco - Networks of Actors - Actor Aliases - cURL. cURL To create an alias, make a POST request passing the alias and actor id. For example, suppose we have an actor that counts  the words sent in a message. We might create an alias for it with the following:. Example response:. With the alias counter created, we can now use it in place of the actor id in any Abaco request. For example, we  can get the actor’s details:. The response returned is identical to that returned when the actor id is used.","<h4>cURL<a class=""headerlink"" href=""#id27"" title=""Permalink to this headline"">¶</a></h4>
 <p>To create an alias, make a POST request passing the alias and actor id. For example, suppose we have an actor that counts
 the words sent in a message. We might create an alias for it with the following:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;alias=counter&amp;actor_id=6PlMbDLa4zlON&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/aliases
 </pre></div>
 </div>
 <p>Example response:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span><span class=""o"">{</span>
   <span class=""s2"">&quot;message&quot;</span>: <span class=""s2"">&quot;Actor alias created successfully.&quot;</span>,
   <span class=""s2"">&quot;result&quot;</span>: <span class=""o"">{</span>
     <span class=""s2"">&quot;_links&quot;</span>: <span class=""o"">{</span>
       <span class=""s2"">&quot;actor&quot;</span>: <span class=""s2"">&quot;https://tacc.tapis.io/v3/actors/6PlMbDLa4zlON&quot;</span>,
       <span class=""s2"">&quot;owner&quot;</span>: <span class=""s2"">&quot;https://tacc.tapis.io/profiles/v3/jstubbs&quot;</span>,
       <span class=""s2"">&quot;self&quot;</span>: <span class=""s2"">&quot;https://tacc.tapis.io/v3/actors/aliases/counter&quot;</span>
     <span class=""o"">}</span>,
     <span class=""s2"">&quot;actor_id&quot;</span>: <span class=""s2"">&quot;6PlMbDLa4zlON&quot;</span>,
     <span class=""s2"">&quot;alias&quot;</span>: <span class=""s2"">&quot;counter&quot;</span>,
     <span class=""s2"">&quot;owner&quot;</span>: <span class=""s2"">&quot;apitest&quot;</span>
   <span class=""o"">}</span>,
   <span class=""s2"">&quot;status&quot;</span>: <span class=""s2"">&quot;success&quot;</span>,
   <span class=""s2"">&quot;version&quot;</span>: <span class=""s2"">&quot;1.1.0&quot;</span>
 <span class=""o"">}</span>
 </pre></div>
 </div>
 <p>With the alias <code class=""docutils literal notranslate""><span class=""pre"">counter</span></code> created, we can now use it in place of the actor id in any Abaco request. For example, we
 can get the actor’s details:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/counter
 </pre></div>
 </div>
 <p>The response returned is identical to that returned when the actor id is used.</p>
 </div>
 </div>
 <div class=""section"" id=""nonces-attached-to-aliases"">
"
43,54,"Introduction to Abaco - Networks of Actors - Actor Events, Links and WebHooks. Nonces Attached to Aliases. Important Support for Nonces attached to aliases was added in version 1.1.0..  Important The nonces attached to aliases feature was updated in version 1.5.0, so that 1) UPDATE permission on the  underlying actor id is required and 2) It is no longer possible to create an alias nonce for permission level UPDATE.. Nonces can be created for aliases in much the same way as creating nonces for a specific actor id - instead of using  the /nonces endpoint associated with the actor id, use the /nonces endpoint associated with the alias instead. The  POST message payload is the same. For example:. will create a nonce associated with the counter alias.. Note Listing, creating and deleting nonces associated with an alias requires the analagous permission for both the alias  and the associated actor.. . Actor Events, Links and WebHooks. Important Support for Actor events, links and webhooks was added in version 1.2.0.. Abaco captures certain events pertaining to the evolution of the system runtime and provides mechanisms for users to  consume these events in actors as well as in external systems. First, Abaco provides a facility to automatically send a message to a specified actor whenever certain events occur. This  mechanism is called an actor link: if actor A is registered with a link property specifying actor B, then Abaco will  automatically send actor B a message whenever any of the recognized events occurs. Second, an actor can be registered with a webhook property: a single string representing a URL to send an HTTP POST  request to. The Abaco events subsystem will send a POST request exactly once to the specified URL whenever a  recognized event occurs. Webhooks and event messages are guaranteed to be delivered in order relative to the order the events occurred for the  specific actor. Since there is no total ordering on events across different actors, there is no analagous order  guarantee.","<h3>Nonces Attached to Aliases<a class=""headerlink"" href=""#nonces-attached-to-aliases"" title=""Permalink to this headline"">¶</a></h3>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">Support for Nonces attached to aliases was added in version 1.1.0.</p>
 </div>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">The nonces attached to aliases feature was updated in version 1.5.0, so that 1) <code class=""docutils literal notranslate""><span class=""pre"">UPDATE</span></code> permission on the
 underlying actor id is required and 2) It is no longer possible to create an alias nonce for permission level <code class=""docutils literal notranslate""><span class=""pre"">UPDATE</span></code>.</p>
 </div>
 <p>Nonces can be created for aliases in much the same way as creating nonces for a specific actor id - instead of using
 the <code class=""docutils literal notranslate""><span class=""pre"">/nonces</span></code> endpoint associated with the actor id, use the <code class=""docutils literal notranslate""><span class=""pre"">/nonces</span></code> endpoint associated with the alias instead. The
 POST message payload is the same. For example:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -d <span class=""s2"">&quot;maxUses=5&amp;level=READ&quot;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors/aliases/counter/nonces
 </pre></div>
 </div>
 <p>will create a nonce associated with the <code class=""docutils literal notranslate""><span class=""pre"">counter</span></code> alias.</p>
 <div class=""admonition note"">
 <p class=""first admonition-title"">Note</p>
 <p class=""last"">Listing, creating and deleting nonces associated with an alias requires the analagous permission for both the alias
 <strong>and</strong> the associated actor.</p>
 </div>
 </div>
 <div class=""section"" id=""actor-events-links-and-webhooks"">
 <h3>Actor Events, Links and WebHooks<a class=""headerlink"" href=""#actor-events-links-and-webhooks"" title=""Permalink to this headline"">¶</a></h3>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">Support for Actor events, links and webhooks was added in version 1.2.0.</p>
 </div>
 <p>Abaco captures certain events pertaining to the evolution of the system runtime and provides mechanisms for users to
 consume these events in actors as well as in external systems.</p>
 <p>First, Abaco provides a facility to automatically send a message to a specified actor whenever certain events occur. This
 mechanism is called an actor <cite>link</cite>: if actor A is registered with a <code class=""docutils literal notranslate""><span class=""pre"">link</span></code> property specifying actor B, then Abaco will
 automatically send actor B a message whenever any of the recognized events occurs.</p>
 <p>Second, an actor can be registered with a <code class=""docutils literal notranslate""><span class=""pre"">webhook</span></code> property: a single string representing a URL to send an HTTP POST
 request to. The Abaco events subsystem will send a POST request <strong>exactly once</strong> to the specified URL whenever a
 recognized event occurs.</p>
 <p>Webhooks and event messages are guaranteed to be delivered in order relative to the order the events occurred for the
 specific actor. Since there is no total ordering on events across different actors, there is no analagous order
 guarantee.</p>
 <div class=""section"" id=""links-or-webhooks-which-to-use"">
"
44,55,"Introduction to Abaco - Networks of Actors - Actor Events, Links and WebHooks - Links or Webhooks - Which to use?. Links or Webhooks - Which to use? In both cases, the details of the event are described in a JSON message (sent to an actor in the case of a link, and  sent in the POST payload in the case of a webhook). However, the actor link is far more general and flexible since  the user can define arbitrary logic to handle the event. Even when the ultimate goal is a webhook, the user may opt for  defining a link to an actor that performs the webhook. This approach enables users to customtize the webhook processing  in various ways, including retry logic, authentication, etc. In fact, the abacosamples/webhook image provides a  webhook dispatcher built to parse the Abaco events message with many configurable options. Use of an actor’s webhook property is really intended for simple use cases or situations missed or dropped events  will not cause a major issue.","<h4>Links or Webhooks - Which to use?<a class=""headerlink"" href=""#links-or-webhooks-which-to-use"" title=""Permalink to this headline"">¶</a></h4>
 <p>In both cases, the details of the event are described in a JSON message (sent to an actor in the case of a link, and
 sent in the POST payload in the case of a webhook).</p>
 <p>However, the actor link is far more general and flexible since
 the user can define arbitrary logic to handle the event. Even when the ultimate goal is a webhook, the user may opt for
 defining a link to an actor that performs the webhook. This approach enables users to customtize the webhook processing
 in various ways, including retry logic, authentication, etc. In fact, the <code class=""docutils literal notranslate""><span class=""pre"">abacosamples/webhook</span></code> image provides a
 webhook dispatcher built to parse the Abaco events message with many configurable options.</p>
 <p>Use of an actor’s <code class=""docutils literal notranslate""><span class=""pre"">webhook</span></code> property is really intended for simple use cases or situations missed or dropped events
 will not cause a major issue.</p>
 <div class=""section"" id=""adding-a-link"">
"
45,56,"Introduction to Abaco - Networks of Actors - Actor Events, Links and WebHooks - Links or Webhooks - Which to use? - Adding a WebHook. Adding a Link Registering an actor with a link (or updating an exisitng actor to add a link property) follows the same semantics as  defined in the registration section; simply add the link attribute in the payload. For example, the following  request creates an actor with a link to actor id 6PlMbDLa4zlON.. It is also possible to link an actor to an alias: just pass link=<the_alias> in the registration payload.. Note Setting a link attribute requires EXECUTE permission for the associated actor..  Note Defining a link property that would result in a cycle of linked actors is not permitted, as this would result in  infinite messages. In particular, an actor cannot link to itself.. . Adding a WebHook Registering an actor with a webhook is accomplished similarly by setting the webhook property in the actor  registration (POST) or update (PUT) payload. For example, the following request creates an actor with a webhook  set to the requestbin at https://eniih104j4tan.x.pipedream.net.","<h5>Adding a Link<a class=""headerlink"" href=""#adding-a-link"" title=""Permalink to this headline"">¶</a></h5>
 <p>Registering an actor with a link (or updating an exisitng actor to add a link property) follows the same semantics as
 defined in the <span class=""xref std std-ref"">registration</span> section; simply add the <code class=""docutils literal notranslate""><span class=""pre"">link</span></code> attribute in the payload. For example, the following
 request creates an actor with a link to actor id <code class=""docutils literal notranslate""><span class=""pre"">6PlMbDLa4zlON</span></code>.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -H <span class=""s2"">&quot;Content-Type: application/json&quot;</span> <span class=""se"">\</span>
 -d <span class=""s1"">&#39;{&quot;image&quot;: &quot;abacosamples/test&quot;, &quot;name&quot;: &quot;test&quot;, &quot;link&quot;: &quot;6PlMbDLa4zlON&quot;, &quot;description&quot;: &quot;My test actor using the abacosamples image.&quot;, &quot;default_environment&quot;:{&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;} }&#39;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors
 </pre></div>
 </div>
 <p>It is also possible to link an actor to an alias: just pass <code class=""docutils literal notranslate""><span class=""pre"">link=&lt;the_alias&gt;</span></code> in the registration payload.</p>
 <div class=""admonition note"">
 <p class=""first admonition-title"">Note</p>
 <p class=""last"">Setting a link attribute requires <code class=""docutils literal notranslate""><span class=""pre"">EXECUTE</span></code> permission for the associated actor.</p>
 </div>
 <div class=""admonition note"">
 <p class=""first admonition-title"">Note</p>
 <p class=""last"">Defining a link property that would result in a cycle of linked actors is not permitted, as this would result in
 infinite messages. In particular, an actor cannot link to itself.</p>
 </div>
 </div>
 <div class=""section"" id=""adding-a-webhook"">
 <h5>Adding a WebHook<a class=""headerlink"" href=""#adding-a-webhook"" title=""Permalink to this headline"">¶</a></h5>
 <p>Registering an actor with a webhook is accomplished similarly by setting the <code class=""docutils literal notranslate""><span class=""pre"">webhook</span></code> property in the actor
 registration (POST) or update (PUT) payload. For example, the following request creates an actor with a webhook
 set to the requestbin at <code class=""docutils literal notranslate""><span class=""pre"">https://eniih104j4tan.x.pipedream.net</span></code>.</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -H <span class=""s2"">&quot;Content-Type: application/json&quot;</span> <span class=""se"">\</span>
 -d <span class=""s1"">&#39;{&quot;image&quot;: &quot;abacosamples/test&quot;, &quot;name&quot;: &quot;test&quot;, &quot;webhook&quot;: &quot;https://eniih104j4tan.x.pipedream.net&quot;, }&#39;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors
 </pre></div>
 </div>
 </div>
 </div>
 <div class=""section"" id=""events-and-event-message-format"">
"
46,57,"Introduction to Abaco - Networks of Actors - Actor Events, Links and WebHooks - Events and Event Message Format. Events and Event Message Format Whenever a supported event occurs, Abaco sends a JSON message to the linked actor or webhook with data about the event.  The included data depends on the event type, as documented below. In the case of a linked actor, all the typical context variables, as  documented in context, will be injected as usual, excepted where noted below. In this case, note that there are  details about two actors: the actor for which the event occurred and the linked actor itself (which are always different,  as self-links are not permitted).  The former is described in the message itself with variables such as actor_id, tenant_id, etc., while the  latter is described using the special reserved Abaco variables, e.g., _abaco_actor_id, etc.. . . . Variable Name relates to Description relates to Event Type. . . actor_id relates to The id of the actor for which the event occurred. relates to all types. . tenant_id relates to The id of the tenant of the actor for which the event occurred. relates to all types. . actor_dbid relates to The internal id of the actor for which the event occurred. relates to all types. . event_type relates to The event type associated with the event. (see table below) relates to all types. . event_time_utc relates to The time of the event, in UTC, as a float. relates to all types. . event_time_display relates to The time of the event, as a string, formatted for display. relates to all types. . _abaco_link relates to The actor id of the linked actor (the actor receiving the event message) relates to all types. . _abaco_username relates to ‘Abaco Event’ relates to all types. . status_message relates to A message indicating details about the error status. relates to ACTOR_ERROR. . execution_id relates to The id of the completed execution. relates to EXECUTION_COMPLETE. . exit_code relates to The exit code of the completed execution. relates to EXECUTION_COMPLETE. . status relates to The final status of the completed execution. relates to EXECUTION_COMPLETE. . . The following table lists all events by their event_type value and a brief description. Additional event types  may be added in subsequent releases.. . .  Event type relates to Description. .  ACTOR_READY relates to The actor is ready to accept messages..  ACTOR_ERROR relates to The actor is in error status and requires manual intervention..  EXECUTION_COMPLETE relates to An actor execution has just completed.","<h4>Events and Event Message Format<a class=""headerlink"" href=""#events-and-event-message-format"" title=""Permalink to this headline"">¶</a></h4>
 <p>Whenever a supported event occurs, Abaco sends a JSON message to the linked actor or webhook with data about the event.
 The included data depends on the event type, as documented below.</p>
 <p>In the case of a linked actor, all the typical context variables, as
 documented in <span class=""xref std std-ref"">context</span>, will be injected as usual, excepted where noted below. In this case, note that there are
 details about two actors: the actor for which the event occurred and the linked actor itself (which are always different,
 as self-links are not permitted).
 The former is described in the message itself with variables such as <code class=""docutils literal notranslate""><span class=""pre"">actor_id</span></code>, <code class=""docutils literal notranslate""><span class=""pre"">tenant_id</span></code>, etc., while the
 latter is described using the special reserved Abaco variables, e.g., <code class=""docutils literal notranslate""><span class=""pre"">_abaco_actor_id</span></code>, etc.</p>
 <table border=""1"" class=""docutils"">
 <colgroup>
 <col width=""18%"" />
 <col width=""64%"" />
 <col width=""17%"" />
 </colgroup>
 <thead valign=""bottom"">
 <tr class=""row-odd""><th class=""head"">Variable Name</th>
 <th class=""head"">Description</th>
 <th class=""head"">Event Type</th>
 </tr>
 </thead>
 <tbody valign=""top"">
 <tr class=""row-even""><td>actor_id</td>
 <td>The id of the actor for which the event occurred.</td>
 <td>all types</td>
 </tr>
 <tr class=""row-odd""><td>tenant_id</td>
 <td>The id of the tenant of the actor for which the event occurred.</td>
 <td>all types</td>
 </tr>
 <tr class=""row-even""><td>actor_dbid</td>
 <td>The internal id of the actor for which the event occurred.</td>
 <td>all types</td>
 </tr>
 <tr class=""row-odd""><td>event_type</td>
 <td>The event type associated with the event. (see table below)</td>
 <td>all types</td>
 </tr>
 <tr class=""row-even""><td>event_time_utc</td>
 <td>The time of the event, in UTC, as a float.</td>
 <td>all types</td>
 </tr>
 <tr class=""row-odd""><td>event_time_display</td>
 <td>The time of the event, as a string, formatted for display.</td>
 <td>all types</td>
 </tr>
 <tr class=""row-even""><td>_abaco_link</td>
 <td>The actor id of the linked actor (the actor receiving the event message)</td>
 <td>all types</td>
 </tr>
 <tr class=""row-odd""><td>_abaco_username</td>
 <td>‘Abaco Event’</td>
 <td>all types</td>
 </tr>
 <tr class=""row-even""><td>status_message</td>
 <td>A message indicating details about the error status.</td>
 <td>ACTOR_ERROR</td>
 </tr>
 <tr class=""row-odd""><td>execution_id</td>
 <td>The id of the completed execution.</td>
 <td>EXECUTION_COMPLETE</td>
 </tr>
 <tr class=""row-even""><td>exit_code</td>
 <td>The exit code of the completed execution.</td>
 <td>EXECUTION_COMPLETE</td>
 </tr>
 <tr class=""row-odd""><td>status</td>
 <td>The final status of the completed execution.</td>
 <td>EXECUTION_COMPLETE</td>
 </tr>
 </tbody>
 </table>
 <p>The following table lists all events by their <code class=""docutils literal notranslate""><span class=""pre"">event_type</span></code> value and a brief description. Additional event types
 may be added in subsequent releases.</p>
 <table border=""1"" class=""docutils"">
 <colgroup>
 <col width=""22%"" />
 <col width=""78%"" />
 </colgroup>
 <thead valign=""bottom"">
 <tr class=""row-odd""><th class=""head"">Event type</th>
 <th class=""head"">Description</th>
 </tr>
 </thead>
 <tbody valign=""top"">
 <tr class=""row-even""><td>ACTOR_READY</td>
 <td>The actor is ready to accept messages.</td>
 </tr>
 <tr class=""row-odd""><td>ACTOR_ERROR</td>
 <td>The actor is in error status and requires manual intervention.</td>
 </tr>
 <tr class=""row-even""><td>EXECUTION_COMPLETE</td>
 <td>An actor execution has just completed.</td>
 </tr>
 </tbody>
 </table>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""autoscaling-actors"">
"
47,58,"Introduction to Abaco - Autoscaling Actors. Autoscaling Actors The Abaco platform has an optional autoscaler subsystem for automatically managing the pool of workers associated with  the registered actors. In general, the autoscaler ignores actors that are registered with stateless: False, as it  assumes these actors must process their message queues synchronously. For stateless actors without custom  configurations, the austocaling algorithm is as follows:. Every 5 seconds, check the length of the actor’s message queue. If the queue length is greater than 0, and the actor’s worker pool is less than the maximum workers per actor, start a new worker. If the queue length is 0, reduce the actor’s worker pool until: a) the worker pool size becomes 0 or b) the actor receives a message.. In particular, the worker pool associated with an actor with 0 messages in its message queue will be reduced to 0 to  free up resources on the Abaco compute cluster.","<h2>Autoscaling Actors<a class=""headerlink"" href=""#autoscaling-actors"" title=""Permalink to this headline"">¶</a></h2>
 <p>The Abaco platform has an optional autoscaler subsystem for automatically managing the pool of workers associated with
 the registered actors. In general, the autoscaler ignores actors that are registered with <code class=""docutils literal notranslate""><span class=""pre"">stateless:</span> <span class=""pre"">False</span></code>, as it
 assumes these actors must process their message queues synchronously. For <cite>stateless</cite> actors without custom
 configurations, the austocaling algorithm is as follows:</p>
 <ol class=""arabic simple"">
 <li>Every 5 seconds, check the length of the actor’s message queue.</li>
 <li>If the queue length is greater than 0, and the actor’s worker pool is less than the maximum workers per actor, start a new worker.</li>
 <li>If the queue length is 0, reduce the actor’s worker pool until: a) the worker pool size becomes 0 or b) the actor receives a message.</li>
 </ol>
 <p>In particular, the worker pool associated with an actor with 0 messages in its message queue will be reduced to 0 to
 free up resources on the Abaco compute cluster.</p>
 <div class=""section"" id=""official-sync-hint"">
"
48,59,"Introduction to Abaco - Autoscaling Actors - Official “sync” Hint. Official “sync” Hint. Important Support for actor hints and the official “sync” hint was added in version 1.4.0.. For some use cases, reducing an actor’s worker pool to 0 as soon as its message queue is empty is not desirable.  Starting up a worker takes significant time, typically on the order of 10 seconds or more, depending on configuration  options for the actor, and adding this overhead to actors that have low latency requirements can be a serious issue.  In particular, actors that will respond to “synchronous messages” (i.e., _abaco_synchronous=true) have low  latency requirements to respond within the HTTP timeout window. For this reason, starting in version 1.4.0, Abaco recognizes an “official” actor hint, sync. When registered  with the sync hint, the Abaco autoscaler will leave at least one worker in the actor’s worker pool up to a  configurable period of idle time (specific to the Abaco tenant). For the Abaco public tenant, this period is 60  minutes. The hints attribute for an actor is saved at registration time. In the following example, we register an  actor with the sync hint using curl:","<h3>Official “sync” Hint<a class=""headerlink"" href=""#official-sync-hint"" title=""Permalink to this headline"">¶</a></h3>
 <div class=""admonition important"">
 <p class=""first admonition-title"">Important</p>
 <p class=""last"">Support for actor hints and the official “sync” hint was added in version 1.4.0.</p>
 </div>
 <p>For some use cases, reducing an actor’s worker pool to 0 as soon as its message queue is empty is not desirable.
 Starting up a worker takes significant time, typically on the order of 10 seconds or more, depending on configuration
 options for the actor, and adding this overhead to actors that have low latency requirements can be a serious issue.
 In particular, actors that will respond to “synchronous messages” (i.e., <code class=""docutils literal notranslate""><span class=""pre"">_abaco_synchronous=true</span></code>) have low
 latency requirements to respond within the HTTP timeout window.</p>
 <p>For this reason, starting in version 1.4.0, Abaco recognizes an “official” actor hint, <code class=""docutils literal notranslate""><span class=""pre"">sync</span></code>. When registered
 with the <code class=""docutils literal notranslate""><span class=""pre"">sync</span></code> hint, the Abaco autoscaler will leave at least one worker in the actor’s worker pool up to a
 configurable period of idle time (specific to the Abaco tenant). For the Abaco public tenant, this period is 60
 minutes.</p>
 <p>The <code class=""docutils literal notranslate""><span class=""pre"">hints</span></code> attribute for an actor is saved at registration time. In the following example, we register an
 actor with the <code class=""docutils literal notranslate""><span class=""pre"">sync</span></code> hint using curl:</p>
 <div class=""highlight-bash notranslate""><div class=""highlight""><pre><span></span>$ curl -H <span class=""s2"">&quot;X-Tapis-Token: </span><span class=""nv"">$TOKEN</span><span class=""s2"">&quot;</span> <span class=""se"">\</span>
 -H <span class=""s2"">&quot;Content-type: application/json&quot;</span> <span class=""se"">\</span>
 -d <span class=""s1"">&#39;{&quot;image&quot;: &quot;abacosamples/wc&quot;, &quot;hints&quot;: [&quot;sync&quot;]}&#39;</span> <span class=""se"">\</span>
 https://tacc.tapis.io/v3/actors
 </pre></div>
 </div>
 </div>
 </div>
 <hr class=""docutils"" />
 <div class=""section"" id=""api-reference"">
"
